window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "eckity", "modulename": "eckity", "kind": "module", "doc": "<p>EC-KitY: Evolutionary Computation Tool Kit in Python</p>\n"}, {"fullname": "eckity.algorithms", "modulename": "eckity.algorithms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm", "modulename": "eckity.algorithms.algorithm", "kind": "module", "doc": "<p>This module implements the Algorithm class.</p>\n"}, {"fullname": "eckity.algorithms.algorithm.logger", "modulename": "eckity.algorithms.algorithm", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.algorithms.algorithm (INFO)&gt;"}, {"fullname": "eckity.algorithms.algorithm.Algorithm", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm", "kind": "class", "doc": "<p>Evolutionary algorithm to be executed.</p>\n\n<p>Abstract Algorithm that can be extended to concrete algorithms,\nsuch as SimpleEvolution, Coevolution etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe population to be evolved.\nConsists of several sub-populations.\nref: <a href=\"https://api.eckity.org/eckity/population.html\">https://api.eckity.org/eckity/population.html</a></li>\n<li><strong>statistics</strong> (Statistics or list of Statistics, default=None):\nProvide statistics on the population during the evolution.\nref: <a href=\"https://api.eckity.org/eckity/statistics.html\">https://api.eckity.org/eckity/statistics.html</a></li>\n<li><strong>breeder</strong> (Breeder, default=SimpleBreeder()):\nResponsible for applying selection and operator sequence on individuals\nin each generation. Applies on one sub-population in simple case.\nref: <a href=\"https://api.eckity.org/eckity/breeders.html\">https://api.eckity.org/eckity/breeders.html</a></li>\n<li><strong>population_evaluator</strong> (PopulationEvaluator,):\ndefault=SimplePopulationEvaluator()\nEvaluates individual fitness scores concurrently and returns the best\nindividual of each subpopulation (one individual in simple case).\nref: <a href=\"https://api.eckity.org/eckity/evaluators.html\">https://api.eckity.org/eckity/evaluators.html</a></li>\n<li><strong>max_generation</strong> (int, default=100):\nMaximal number of generations to run the evolutionary process.\nNote the evolution could end before reaching max_generation,\ndepends on the termination checker.\nNote there are up to <code>max_generation + 1</code> fitness calculations,\nbut only up to <code>max_generation</code> selections</li>\n<li><strong>events</strong> (dict(str, dict(object, function)), default=None):\ndict of events, each event holds a dict (subscriber, callback).</li>\n<li><strong>event_names</strong> (list of strings, default=None):\nNames of events to publish during the evolution.</li>\n<li><strong>termination_checker</strong> (TerminationChecker or a list of TerminationCheckers,):\ndefault=None\nChecks if the algorithm should terminate early.\nref: <a href=\"https://api.eckity.org/eckity/termination_checkers.html\">https://api.eckity.org/eckity/termination_checkers.html</a></li>\n<li><strong>max_workers</strong> (int, default=None):\nMaximal number of worker nodes for the Executor object\nthat evaluates the fitness of the individuals.\nref: <a href=\"https://docs.python.org/3/library/concurrent.futures.html\">https://docs.python.org/3/library/concurrent.futures.html</a></li>\n<li><strong>random_generator</strong> (RNG, default=RNG()):\nRandom Number Generator.</li>\n<li><strong>random_seed</strong> (int, default=current system time):\nRandom seed for deterministic experiment.</li>\n<li><strong>generation_seed</strong> (int, default=None):\nCurrent generation seed.\nUseful for resuming a previously paused experiment.</li>\n<li><strong>generation_num</strong> (int, default=0):\nCurrent generation number</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>final_generation_</strong> (int):\nThe generation in which the evolution ended.</li>\n</ul>\n", "bases": "eckity.event_based_operator.Operator, abc.ABC"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.breeder", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.breeder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.population_evaluator", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.population_evaluator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.termination_checker", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.termination_checker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.max_generation", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.max_generation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.random_generator", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.random_generator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.random_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.random_seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.generation_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.generation_seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.best_of_run_", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.best_of_run_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.worst_of_gen", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.worst_of_gen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.generation_num", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.generation_num", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.max_workers", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.max_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.final_generation_", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.final_generation_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.apply_operator", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.apply_operator", "kind": "function", "doc": "<p>begin the evolutionary run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.evolve", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.evolve", "kind": "function", "doc": "<p>Performs the evolutionary run by initializing the random seed,\ncreating the population, performing the evolutionary loop\nand finally finishing the evolution process</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.execute", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.execute", "kind": "function", "doc": "<p>Execute the algorithm result after evolution ended.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong> (keyword arguments (relevant in GP representation)):\nInput to program, including every variable\nin the terminal set as a keyword argument.\nFor example, if <code>terminal_set=['x', 'y', 'z', 0, 1, -1]</code>\nthen call <code>execute(x=..., y=..., z=...)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Result of algorithm execution (for example: the best\nindividual in GA, or the best individual execution in GP)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.initialize", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.initialize", "kind": "function", "doc": "<p>Initialize seed, Executor and relevant operators</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.evolve_main_loop", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.evolve_main_loop", "kind": "function", "doc": "<p>Performs the evolutionary main loop</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.update_gen", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.update_gen", "kind": "function", "doc": "<p>Update <code>gen</code> field for all individuals</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gen</strong> (int):\nCurrent generation number</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gen</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.generation_iteration", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.generation_iteration", "kind": "function", "doc": "<p>Performs an iteration of the evolutionary main loop</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gen</strong> (int):\ncurrent generation number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the main loop should terminate, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gen</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.finish", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.finish", "kind": "function", "doc": "<p>Finish the evolutionary run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.create_population", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.create_population", "kind": "function", "doc": "<p>Create the population for the evolutionary run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.event_name_to_data", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.event_name_to_data", "kind": "function", "doc": "<p>Convert event name to relevant data of the Algorithm for the event</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>event_name</strong> (string):\nname of the event that is happening</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, object]</strong>: Algorithm data regarding the given event</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.set_random_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.set_random_seed", "kind": "function", "doc": "<p>Set the initial seed for the random generator\nThis method is called once at the beginning of the run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seed</strong> (int):\nrandom seed number</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.set_generation_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.set_generation_seed", "kind": "function", "doc": "<p>Set the seed for current generation.\nThis method is called once every generation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seed</strong> (int):\ncurrent generation seed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.next_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.next_seed", "kind": "function", "doc": "<p>Increase the random seed for the next generation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong></li>\n<li><strong>random seed number</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.should_terminate", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.should_terminate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">population</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span>,</span><span class=\"param\">\t<span class=\"n\">best_of_run_</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">individual</span><span class=\"o\">.</span><span class=\"n\">Individual</span>,</span><span class=\"param\">\t<span class=\"n\">generation_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution", "modulename": "eckity.algorithms.simple_evolution", "kind": "module", "doc": "<p>This module implements the SimpleEvolution class.</p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution", "kind": "class", "doc": "<p>Simple case evolutionary algorithm.</p>\n\n<p>Basic evolutionary algorithm that contains one subpopulation.\nDoes not include and is not meant for multi-objective, co-evolution etc.\nSuch algorithms should be implemented in a new Algorithm subclass.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe population to be evolved.\nContains only one subpopulation in simple case.</li>\n<li><strong>statistics</strong> (Union[Statistics, List[Statistics]], default=None):\nProvide multiple statistics on the population during the evolution.</li>\n<li><strong>breeder</strong> (SimpleBreeder):\nResponsible for applying selection and operators on individuals\nin each generation. Applies on one subpopulation in simple case.</li>\n<li><strong>population_evaluator</strong> (SimplePopulationEvaluator,):\ndefault=SimplePopulationEvaluator instance\nResponsible for evaluating each individual's fitness concurrently\nand returns the best individual of each subpopulation\n(returns a single individual in simple case).</li>\n<li><strong>max_generation</strong> (int, default=1000):\nMaximal number of generations to run the evolutionary process.\nNote the evolution could end before reaching max_generation,\ndepending on the termination checker.</li>\n<li><strong>events</strong> (dict(str, dict(object, function)), default=None):\nDictionary of events, where each event holds\na dictionary of (subscriber, callback method).</li>\n<li><strong>event_names</strong> (list of strings, default=None):\nNames of events to publish during the evolution.</li>\n<li><strong>termination_checker</strong> (TerminationChecker):\nChecks if the evolution should perform early termination.</li>\n<li><strong>max_workers</strong> (int, default=None):\nMaximal number of worker nodes for the Executor object that\nevaluates the fitness of the individuals.</li>\n<li><strong>random_generator</strong> (RNG):\nRandom number generator</li>\n<li><strong>random_seed</strong> (int, default=current system time):\nInitial random seed for deterministic experiment.</li>\n<li><strong>generation_seed</strong> (int, default=None):\nCurrent generation seed.\nUseful for resuming a previously paused experiment.</li>\n<li><strong>best_of_run_</strong> (Individual, default=None):\nThe individual with the best fitness in the entire evolution.</li>\n<li><strong>best_of_gen</strong> (Individual, default=None):\nThe individual that has the best fitness in the current generation.</li>\n<li><strong>worst_of_gen</strong> (Individual, default=None):\nThe individual that has the worst fitness in current generation.</li>\n<li><strong>generation_num</strong> (int, default=0):\nCurrent generation number</li>\n</ul>\n", "bases": "eckity.algorithms.algorithm.Algorithm"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.__init__", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">population</span>,</span><span class=\"param\">\t<span class=\"n\">statistics</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">breeder</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">breeders</span><span class=\"o\">.</span><span class=\"n\">simple_breeder</span><span class=\"o\">.</span><span class=\"n\">SimpleBreeder</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">breeders</span><span class=\"o\">.</span><span class=\"n\">simple_breeder</span><span class=\"o\">.</span><span class=\"n\">SimpleBreeder</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">population_evaluator</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">evaluators</span><span class=\"o\">.</span><span class=\"n\">simple_population_evaluator</span><span class=\"o\">.</span><span class=\"n\">SimplePopulationEvaluator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_generation</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">termination_checker</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"s1\">&#39;thread&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_generator</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">RNG</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">RNG</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">generation_seed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">best_of_run_</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">best_of_gen</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worst_of_gen</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">generation_num</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.termination_checker", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.termination_checker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.best_of_run_", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.best_of_run_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.best_of_gen", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.best_of_gen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.worst_of_gen", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.worst_of_gen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.max_generation", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.max_generation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.final_generation_", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.final_generation_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.initialize", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.initialize", "kind": "function", "doc": "<p>Initialize the evolutionary algorithm</p>\n\n<p>Register statistics to <code>after_generation</code> event</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.generation_iteration", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.generation_iteration", "kind": "function", "doc": "<p>Performs one iteration of the evolutionary run,\nfor the current generation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gen:</strong>: current generation number (for example, generation #100)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gen</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.execute", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.execute", "kind": "function", "doc": "<p>Compute output using best evolved individual.\nUse <code>execute</code> in a non-sklearn setting.\nInput keyword arguments that set variable values.\nFor example if <code>terminal_set=['x', 'y', 1, -1]</code>\nthen call <code>execute(x=..., y=...)</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (keyword arguments):\nThe input to the program (tree).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Output as computed by the best individual of the evolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.finish", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.finish", "kind": "function", "doc": "<p>Finish the evolutionary run by showing the best individual\nand printing the best fitness</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.get_individual_evaluator", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.get_individual_evaluator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.get_average_fitness", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.get_average_fitness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.event_name_to_data", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.event_name_to_data", "kind": "function", "doc": "<p>Convert event name to relevant data of the Algorithm for the event</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>event_name</strong> (string):\nname of the event that is happening</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, object]</strong>: Algorithm data regarding the given event</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.tests", "modulename": "eckity.algorithms.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.tests.test_simple_evolution", "modulename": "eckity.algorithms.tests.test_simple_evolution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.tests.test_simple_evolution.DummyIndividualEvaluator", "modulename": "eckity.algorithms.tests.test_simple_evolution", "qualname": "DummyIndividualEvaluator", "kind": "class", "doc": "<p>Computes fitness value for the given individuals.\nAll simple classes assume only one sub-population.\nEvaluates each individual separately.\nYou will need to extend this class with your fitness evaluation methods.</p>\n", "bases": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator"}, {"fullname": "eckity.algorithms.tests.test_simple_evolution.DummyIndividualEvaluator.evaluate_individual", "modulename": "eckity.algorithms.tests.test_simple_evolution", "qualname": "DummyIndividualEvaluator.evaluate_individual", "kind": "function", "doc": "<p>Evaluate the fitness score for the given individual.\nThis function must be implemented by subclasses of this class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Individual):\nThe individual to compute the fitness for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The evaluated fitness value for the given individual</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.algorithms.tests.test_simple_evolution.test_initialize", "modulename": "eckity.algorithms.tests.test_simple_evolution", "qualname": "test_initialize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base", "modulename": "eckity.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.base.typed_functions", "modulename": "eckity.base.typed_functions", "kind": "module", "doc": "<p>This module implements functions used in the function nodes of a GP tree.\nNote: all functions work on numpy arrays.</p>\n"}, {"fullname": "eckity.base.typed_functions.add2floats", "modulename": "eckity.base.typed_functions", "qualname": "add2floats", "kind": "function", "doc": "<p>x+y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.sub2floats", "modulename": "eckity.base.typed_functions", "qualname": "sub2floats", "kind": "function", "doc": "<p>x-y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.mul2floats", "modulename": "eckity.base.typed_functions", "qualname": "mul2floats", "kind": "function", "doc": "<p>x*y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.div2floats", "modulename": "eckity.base.typed_functions", "qualname": "div2floats", "kind": "function", "doc": "<p>protected division: if abs(y) &gt; 0.001 return x/y else return 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.sqrt_float", "modulename": "eckity.base.typed_functions", "qualname": "sqrt_float", "kind": "function", "doc": "<p>protected square root: sqrt(abs(x))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.log_float", "modulename": "eckity.base.typed_functions", "qualname": "log_float", "kind": "function", "doc": "<p>protected log: if abs(x) &gt; 0.001 return log(abs(x)) else return 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.abs_float", "modulename": "eckity.base.typed_functions", "qualname": "abs_float", "kind": "function", "doc": "<p>absolute value of x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.neg_float", "modulename": "eckity.base.typed_functions", "qualname": "neg_float", "kind": "function", "doc": "<p>negative of x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.inv_float", "modulename": "eckity.base.typed_functions", "qualname": "inv_float", "kind": "function", "doc": "<p>protected inverse: if abs(x) &gt; 0.001 return 1/x else return 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.max2floats", "modulename": "eckity.base.typed_functions", "qualname": "max2floats", "kind": "function", "doc": "<p>maximum(x,y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.min2floats", "modulename": "eckity.base.typed_functions", "qualname": "min2floats", "kind": "function", "doc": "<p>minimum(x,y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.sin_float", "modulename": "eckity.base.typed_functions", "qualname": "sin_float", "kind": "function", "doc": "<p>sin(x)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.cos_float", "modulename": "eckity.base.typed_functions", "qualname": "cos_float", "kind": "function", "doc": "<p>cos(x)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.tan_float", "modulename": "eckity.base.typed_functions", "qualname": "tan_float", "kind": "function", "doc": "<p>tan(x)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.iflte0_floats", "modulename": "eckity.base.typed_functions", "qualname": "iflte0_floats", "kind": "function", "doc": "<p>if x &lt;= 0 return y else return z</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.ifgt0_floats", "modulename": "eckity.base.typed_functions", "qualname": "ifgt0_floats", "kind": "function", "doc": "<p>if x &gt; 0 return y else return z</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.iflte_floats", "modulename": "eckity.base.typed_functions", "qualname": "iflte_floats", "kind": "function", "doc": "<p>if x &lt;= y return z else return w</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.ifgt_floats", "modulename": "eckity.base.typed_functions", "qualname": "ifgt_floats", "kind": "function", "doc": "<p>if x &gt; y return z else return w</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.and2floats", "modulename": "eckity.base.typed_functions", "qualname": "and2floats", "kind": "function", "doc": "<p>x and y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.or2floats", "modulename": "eckity.base.typed_functions", "qualname": "or2floats", "kind": "function", "doc": "<p>x or y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.not2floats", "modulename": "eckity.base.typed_functions", "qualname": "not2floats", "kind": "function", "doc": "<p>not x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.if_then_else", "modulename": "eckity.base.typed_functions", "qualname": "if_then_else", "kind": "function", "doc": "<p>if test return dit else return dif</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">dit</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">dif</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.argmax2floats", "modulename": "eckity.base.typed_functions", "qualname": "argmax2floats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">argmax</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.and2ints", "modulename": "eckity.base.typed_functions", "qualname": "and2ints", "kind": "function", "doc": "<p>x and y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.or2ints", "modulename": "eckity.base.typed_functions", "qualname": "or2ints", "kind": "function", "doc": "<p>x or y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.not2ints", "modulename": "eckity.base.typed_functions", "qualname": "not2ints", "kind": "function", "doc": "<p>not x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.if_then_else3ints", "modulename": "eckity.base.typed_functions", "qualname": "if_then_else3ints", "kind": "function", "doc": "<p>if test return dit else return dif</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dif</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.and2bools", "modulename": "eckity.base.typed_functions", "qualname": "and2bools", "kind": "function", "doc": "<p>x and y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.or2bools", "modulename": "eckity.base.typed_functions", "qualname": "or2bools", "kind": "function", "doc": "<p>x or y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.not2bools", "modulename": "eckity.base.typed_functions", "qualname": "not2bools", "kind": "function", "doc": "<p>not x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.typed_functions.if_then_else3bools", "modulename": "eckity.base.typed_functions", "qualname": "if_then_else3bools", "kind": "function", "doc": "<p>if test return dit else return dif</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">dit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">dif</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.types", "modulename": "eckity.base.types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.base.types.t_argmax", "modulename": "eckity.base.types", "qualname": "t_argmax", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;eckity.base.types.argmax&#x27;&gt;"}, {"fullname": "eckity.base.untyped_functions", "modulename": "eckity.base.untyped_functions", "kind": "module", "doc": "<p>This module implements functions used in the function (internal) nodes of a GP tree.\nNote: all functions work on numpy arrays.</p>\n"}, {"fullname": "eckity.base.untyped_functions.f_add", "modulename": "eckity.base.untyped_functions", "qualname": "f_add", "kind": "function", "doc": "<p>x+y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_sub", "modulename": "eckity.base.untyped_functions", "qualname": "f_sub", "kind": "function", "doc": "<p>x-y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_mul", "modulename": "eckity.base.untyped_functions", "qualname": "f_mul", "kind": "function", "doc": "<p>x*y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_div", "modulename": "eckity.base.untyped_functions", "qualname": "f_div", "kind": "function", "doc": "<p>protected division: if abs(y) &gt; 0.001 return x/y else return 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_sqrt", "modulename": "eckity.base.untyped_functions", "qualname": "f_sqrt", "kind": "function", "doc": "<p>protected square root: sqrt(abs(x))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_log", "modulename": "eckity.base.untyped_functions", "qualname": "f_log", "kind": "function", "doc": "<p>protected log: if abs(x) &gt; 0.001 return log(abs(x)) else return 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_abs", "modulename": "eckity.base.untyped_functions", "qualname": "f_abs", "kind": "function", "doc": "<p>absolute value of x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_neg", "modulename": "eckity.base.untyped_functions", "qualname": "f_neg", "kind": "function", "doc": "<p>negative of x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_inv", "modulename": "eckity.base.untyped_functions", "qualname": "f_inv", "kind": "function", "doc": "<p>protected inverse: if abs(x) &gt; 0.001 return 1/x else return 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_max", "modulename": "eckity.base.untyped_functions", "qualname": "f_max", "kind": "function", "doc": "<p>maximum(x,y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_min", "modulename": "eckity.base.untyped_functions", "qualname": "f_min", "kind": "function", "doc": "<p>minimum(x,y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_sin", "modulename": "eckity.base.untyped_functions", "qualname": "f_sin", "kind": "function", "doc": "<p>sin(x)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_cos", "modulename": "eckity.base.untyped_functions", "qualname": "f_cos", "kind": "function", "doc": "<p>cos(x)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_tan", "modulename": "eckity.base.untyped_functions", "qualname": "f_tan", "kind": "function", "doc": "<p>tan(x)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_iflte0", "modulename": "eckity.base.untyped_functions", "qualname": "f_iflte0", "kind": "function", "doc": "<p>if x &lt;= 0 return y else return z</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_ifgt0", "modulename": "eckity.base.untyped_functions", "qualname": "f_ifgt0", "kind": "function", "doc": "<p>if x &gt; 0 return y else return z</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_iflte", "modulename": "eckity.base.untyped_functions", "qualname": "f_iflte", "kind": "function", "doc": "<p>if x &lt;= y return z else return w</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_ifgt", "modulename": "eckity.base.untyped_functions", "qualname": "f_ifgt", "kind": "function", "doc": "<p>if x &gt; y return z else return w</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_and", "modulename": "eckity.base.untyped_functions", "qualname": "f_and", "kind": "function", "doc": "<p>x and y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_or", "modulename": "eckity.base.untyped_functions", "qualname": "f_or", "kind": "function", "doc": "<p>x or y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_not", "modulename": "eckity.base.untyped_functions", "qualname": "f_not", "kind": "function", "doc": "<p>not x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.untyped_functions.f_if_then_else", "modulename": "eckity.base.untyped_functions", "qualname": "f_if_then_else", "kind": "function", "doc": "<p>if test return dit else return dif</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">test</span>, </span><span class=\"param\"><span class=\"n\">dit</span>, </span><span class=\"param\"><span class=\"n\">dif</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.base.utils", "modulename": "eckity.base.utils", "kind": "module", "doc": "<p>This module implements some utility functions.</p>\n"}, {"fullname": "eckity.base.utils.arity", "modulename": "eckity.base.utils", "qualname": "arity", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (function):\nA function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arity</strong> (int):\nThe function's arity.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher", "modulename": "eckity.before_after_publisher", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.before_after_publisher.BEFORE_OPERATOR_EVENT_NAME", "modulename": "eckity.before_after_publisher", "qualname": "BEFORE_OPERATOR_EVENT_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;before_operator&#x27;"}, {"fullname": "eckity.before_after_publisher.AFTER_OPERATOR_EVENT_NAME", "modulename": "eckity.before_after_publisher", "qualname": "AFTER_OPERATOR_EVENT_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;after_operator&#x27;"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.__init__", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">event_names</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.customers_id", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.customers_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.register", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.register", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span>, </span><span class=\"param\"><span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.unregister", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.unregister", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span>, </span><span class=\"param\"><span class=\"n\">customers_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.publish", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.publish", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.event_name_to_data", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.event_name_to_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.act_and_publish_before_after", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.act_and_publish_before_after", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">act_func</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders", "modulename": "eckity.breeders", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.breeder", "modulename": "eckity.breeders.breeder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.breeder.Breeder", "modulename": "eckity.breeders.breeder", "qualname": "Breeder", "kind": "class", "doc": "<p>The Breeder is responsible to activate the genetic operators (selection, crossover, mutation)\non the existing population</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>events</strong> (dict(str, dict(object, function))):\ndictionary of event names to dictionary of subscribers to callback methods</li>\n</ul>\n", "bases": "eckity.event_based_operator.Operator, abc.ABC"}, {"fullname": "eckity.breeders.breeder.Breeder.breed", "modulename": "eckity.breeders.breeder", "qualname": "Breeder.breed", "kind": "function", "doc": "<p>Breed the given population of the experiment.\nHence, apply genetic operators on the individuals of the population.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>population</strong> (Population):</p></li>\n<li><p><strong>The population of individuals existing in the current experiment.</strong></p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders.breeder.Breeder.apply_breed", "modulename": "eckity.breeders.breeder", "qualname": "Breeder.apply_breed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders.breeder.Breeder.apply_operator", "modulename": "eckity.breeders.breeder", "qualname": "Breeder.apply_operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders.simple_breeder", "modulename": "eckity.breeders.simple_breeder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder", "kind": "class", "doc": "<p>A Simple version of Breeder class.\nAll simple classes assume there is only one sub-population in population.</p>\n", "bases": "eckity.breeders.breeder.Breeder"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.__init__", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.selected_individuals", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.selected_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.best_of_run", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.best_of_run", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.apply_breed", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.apply_breed", "kind": "function", "doc": "<p>Apply elitism, selection and operator sequence on the sub-populations.\nIn simple case, the operator sequence is applied on one sub-population.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population:</strong>: Population of sub-populations of individuals.\nThe operators will be applied on those individuals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.event_name_to_data", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.event_name_to_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders.tests", "modulename": "eckity.breeders.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.tests.test_simple_breeder", "modulename": "eckity.breeders.tests.test_simple_breeder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.DummyIndividualEvaluator", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "DummyIndividualEvaluator", "kind": "class", "doc": "<p>Computes fitness value for the given individuals.\nAll simple classes assume only one sub-population.\nEvaluates each individual separately.\nYou will need to extend this class with your fitness evaluation methods.</p>\n", "bases": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.DummyIndividualEvaluator.evaluate_individual", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "DummyIndividualEvaluator.evaluate_individual", "kind": "function", "doc": "<p>Evaluate the fitness score for the given individual.\nThis function must be implemented by subclasses of this class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Individual):\nThe individual to compute the fitness for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The evaluated fitness value for the given individual</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.DummyCrossover", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "DummyCrossover", "kind": "class", "doc": "<p>Abstract class for genetic operators.\nEach operator has a probability of being applied each generation.</p>\n\n<p>Genetic operators are applied in-place.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of being applied each generation, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nnumber of individuals required for the operator, by default 0</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events that the operator publishes, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.genetic_operator.GeneticOperator"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.DummyCrossover.__init__", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "DummyCrossover.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.DummyCrossover.individuals", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "DummyCrossover.individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.DummyCrossover.applied_individuals", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "DummyCrossover.applied_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.DummyCrossover.apply", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "DummyCrossover.apply", "kind": "function", "doc": "<p>Apply the genetic operator to the individuals.\nThis method should be implemented by the subclasses.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong> (List[Individual]):\nIndividuals to apply the operator to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individuals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.breeders.tests.test_simple_breeder.test_incompatible_operator_arities", "modulename": "eckity.breeders.tests.test_simple_breeder", "qualname": "test_incompatible_operator_arities", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators", "modulename": "eckity.creators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.creator", "modulename": "eckity.creators.creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.creator.Creator", "modulename": "eckity.creators.creator", "qualname": "Creator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.creators.creator.Creator.created_individuals", "modulename": "eckity.creators.creator", "qualname": "Creator.created_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.creator.Creator.fitness_type", "modulename": "eckity.creators.creator", "qualname": "Creator.fitness_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.creator.Creator.create_individuals", "modulename": "eckity.creators.creator", "qualname": "Creator.create_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n_individuals</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">higher_is_better</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">individual</span><span class=\"o\">.</span><span class=\"n\">Individual</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.creator.Creator.apply_operator", "modulename": "eckity.creators.creator", "qualname": "Creator.apply_operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.creator.Creator.event_name_to_data", "modulename": "eckity.creators.creator", "qualname": "Creator.event_name_to_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.ga_creators", "modulename": "eckity.creators.ga_creators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.bit_string_vector_creator", "modulename": "eckity.creators.ga_creators.bit_string_vector_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.bit_string_vector_creator.GABitStringVectorCreator", "modulename": "eckity.creators.ga_creators.bit_string_vector_creator", "qualname": "GABitStringVectorCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator"}, {"fullname": "eckity.creators.ga_creators.bit_string_vector_creator.GABitStringVectorCreator.__init__", "modulename": "eckity.creators.ga_creators.bit_string_vector_creator", "qualname": "GABitStringVectorCreator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">gene_creator</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.creators.ga_creators.float_vector_creator", "modulename": "eckity.creators.ga_creators.float_vector_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.float_vector_creator.GAFloatVectorCreator", "modulename": "eckity.creators.ga_creators.float_vector_creator", "qualname": "GAFloatVectorCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator"}, {"fullname": "eckity.creators.ga_creators.float_vector_creator.GAFloatVectorCreator.__init__", "modulename": "eckity.creators.ga_creators.float_vector_creator", "qualname": "GAFloatVectorCreator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">gene_creator</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.creators.ga_creators.int_vector_creator", "modulename": "eckity.creators.ga_creators.int_vector_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.int_vector_creator.GAIntVectorCreator", "modulename": "eckity.creators.ga_creators.int_vector_creator", "qualname": "GAIntVectorCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator"}, {"fullname": "eckity.creators.ga_creators.int_vector_creator.GAIntVectorCreator.__init__", "modulename": "eckity.creators.ga_creators.int_vector_creator", "qualname": "GAIntVectorCreator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">gene_creator</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.creator.Creator"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.__init__", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">gene_creator</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\tvector_type=&lt;class &#x27;eckity.genetic_encodings.ga.bit_string_vector.BitStringVector&#x27;&gt;,</span><span class=\"param\">\tfitness_type=&lt;class &#x27;eckity.fitness.simple_fitness.SimpleFitness&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.gene_creator", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.gene_creator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.type", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.length", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.bounds", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.bounds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.update_parents", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.update_parents", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.create_individuals", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.create_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_individuals</span>, </span><span class=\"param\"><span class=\"n\">higher_is_better</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.create_vector", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.create_vector", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.ga_creators.simple_vector_creator.GAVectorCreator.default_gene_creator", "modulename": "eckity.creators.ga_creators.simple_vector_creator", "qualname": "GAVectorCreator.default_gene_creator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">individual</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators", "modulename": "eckity.creators.gp_creators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.full", "modulename": "eckity.creators.gp_creators.full", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.full.FullCreator", "modulename": "eckity.creators.gp_creators.full", "qualname": "FullCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.gp_creators.tree_creator.GPTreeCreator"}, {"fullname": "eckity.creators.gp_creators.full.FullCreator.__init__", "modulename": "eckity.creators.gp_creators.full", "qualname": "FullCreator.__init__", "kind": "function", "doc": "<p>Tree creator using the full method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>init_depth</strong> ((int, int)):</p></li>\n<li><p><strong>Min and max depths of initial random trees. The default is None.</strong></p></li>\n<li><strong>function_set</strong> (list):\nList of functions used as internal nodes in the GP tree. The default is None.</li>\n<li><strong>terminal_set</strong> (list):\nList of terminals used in the GP-tree leaves. The default is None.</li>\n<li><strong>bloat_weight</strong> (float):\nBloat control weight to punish large trees. Bigger values make a bigger punish.</li>\n<li><strong>events</strong> (list):\nList of events related to this class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">init_depth</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">function_set</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_set</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">erc_range</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bloat_weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.creators.gp_creators.full.FullCreator.create_tree", "modulename": "eckity.creators.gp_creators.full", "qualname": "FullCreator.create_tree", "kind": "function", "doc": "<p>Recursively create a random tree using the full method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>depth</strong> (int):\nCurrent depth in recursive process.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span>,</span><span class=\"param\">\t<span class=\"n\">random_function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">FunctionNode</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">random_terminal</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TerminalNode</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.grow", "modulename": "eckity.creators.gp_creators.grow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.grow.GrowCreator", "modulename": "eckity.creators.gp_creators.grow", "qualname": "GrowCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.gp_creators.tree_creator.GPTreeCreator"}, {"fullname": "eckity.creators.gp_creators.grow.GrowCreator.__init__", "modulename": "eckity.creators.gp_creators.grow", "qualname": "GrowCreator.__init__", "kind": "function", "doc": "<p>Tree creator using the grow method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>init_depth</strong> ((int, int)):</p></li>\n<li><p><strong>Min and max depths of initial random trees. The default is None.</strong></p></li>\n<li><strong>function_set</strong> (list, default=None):\nList of functions used as internal nodes in the GP-tree.</li>\n<li><strong>terminal_set</strong> (list, default=None.):\nList of terminals used in the GP-tree leaves.</li>\n<li><strong>bloat_weight</strong> (float, default=0.0):\nBloat control weight to punish large trees.</li>\n<li><strong>p_prune</strong> (float, default=0.5):\nProbability of pruning the tree at each level.</li>\n<li><strong>events</strong> (list):\nList of events related to this class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">init_depth</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">function_set</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_set</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bloat_weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">erc_range</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">p_prune</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.creators.gp_creators.grow.GrowCreator.p_prune", "modulename": "eckity.creators.gp_creators.grow", "qualname": "GrowCreator.p_prune", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.grow.GrowCreator.create_tree", "modulename": "eckity.creators.gp_creators.grow", "qualname": "GrowCreator.create_tree", "kind": "function", "doc": "<p>Generate a list of TreeNodes in-place.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tree</strong> (List[TreeNode]):\nList of tree nodes representing a tree of a Tree individual.</li>\n<li><strong>random_function</strong> (Callable[[type], Optional[FunctionNode]]):\nRandom FunctionNode generator.</li>\n<li><strong>random_terminal</strong> (Callable[[type], Optional[TerminalNode]]):\nRandom TerminalNode generator.</li>\n<li><strong>depth</strong> (int, optional):\ncurrent depth of the tree, by default 0</li>\n<li><strong>node_type</strong> (Optional[type], optional):\n_description_, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">random_function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">FunctionNode</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">random_terminal</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TerminalNode</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.half", "modulename": "eckity.creators.gp_creators.half", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.half.HalfCreator", "modulename": "eckity.creators.gp_creators.half", "qualname": "HalfCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.gp_creators.tree_creator.GPTreeCreator"}, {"fullname": "eckity.creators.gp_creators.half.HalfCreator.__init__", "modulename": "eckity.creators.gp_creators.half", "qualname": "HalfCreator.__init__", "kind": "function", "doc": "<p>Tree creator that creates trees using the Ramped Half and Half method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grow_creator</strong> (GrowCreator):\na tree creator that creates trees using the grow method</li>\n<li><strong>full_creator</strong> (FullCreator):\na tree creator that creates trees using the full method</li>\n<li><p><strong>init_depth</strong> ((int, int)):</p></li>\n<li><p><strong>Min and max depths of initial random trees. The default is None.</strong></p></li>\n<li><strong>function_set</strong> (list):\nList of functions used as internal nodes in the GP tree. The default is None.</li>\n<li><strong>terminal_set</strong> (list or dict):\nList of terminals used in the GP-tree leaves. The default is None.</li>\n<li><strong>bloat_weight</strong> (float):\nBloat control weight to punish large trees. Bigger values make a bigger punish.</li>\n<li><strong>events</strong> (list):\nList of events related to this class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grow_creator</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">creators</span><span class=\"o\">.</span><span class=\"n\">gp_creators</span><span class=\"o\">.</span><span class=\"n\">grow</span><span class=\"o\">.</span><span class=\"n\">GrowCreator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">full_creator</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">creators</span><span class=\"o\">.</span><span class=\"n\">gp_creators</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"o\">.</span><span class=\"n\">FullCreator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">init_depth</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">function_set</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_set</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bloat_weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">erc_range</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.creators.gp_creators.half.HalfCreator.grow_creator", "modulename": "eckity.creators.gp_creators.half", "qualname": "HalfCreator.grow_creator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.half.HalfCreator.full_creator", "modulename": "eckity.creators.gp_creators.half", "qualname": "HalfCreator.full_creator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.half.HalfCreator.create_individuals", "modulename": "eckity.creators.gp_creators.half", "qualname": "HalfCreator.create_individuals", "kind": "function", "doc": "<p>Initialize the subpopulation individuals using ramped half-and-half method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_individuals</strong> (int):\nnumber of individuals to create</li>\n<li><strong>higher_is_better</strong> (bool):\ndetermines if the fitness of the created individuals should be minimized or maximized</li>\n<li><strong>Returns</strong></li>\n<li><strong>-------</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n_individuals</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">higher_is_better</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_individual</span><span class=\"o\">.</span><span class=\"n\">Tree</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tests", "modulename": "eckity.creators.gp_creators.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tests.test_full", "modulename": "eckity.creators.gp_creators.tests.test_full", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tests.test_full.test_create_tree", "modulename": "eckity.creators.gp_creators.tests.test_full", "qualname": "test_create_tree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tests.test_grow", "modulename": "eckity.creators.gp_creators.tests.test_grow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tests.test_grow.test_add_children", "modulename": "eckity.creators.gp_creators.tests.test_grow", "qualname": "test_add_children", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function_set</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_set</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">expected</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tests.test_half", "modulename": "eckity.creators.gp_creators.tests.test_half", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tests.test_half.test_zero_group_size", "modulename": "eckity.creators.gp_creators.tests.test_half", "qualname": "test_zero_group_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tests.test_half.test_create_individuals", "modulename": "eckity.creators.gp_creators.tests.test_half", "qualname": "test_create_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tree_creator", "modulename": "eckity.creators.gp_creators.tree_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.creators.creator.Creator"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.__init__", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">init_depth</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">function_set</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_set</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">erc_range</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\tfitness_type: type = &lt;class &#x27;eckity.fitness.simple_fitness.SimpleFitness&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">bloat_weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.init_depth", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.init_depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.function_set", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.function_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.terminal_set", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.terminal_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.bloat_weight", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.bloat_weight", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.root_type", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.root_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.update_parents", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.update_parents", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.erc_range", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.erc_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.create_individuals", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.create_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n_individuals</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">higher_is_better</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_individual</span><span class=\"o\">.</span><span class=\"n\">Tree</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GPTreeCreator.create_tree", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GPTreeCreator.create_tree", "kind": "function", "doc": "<p>Recursively build the tree representation\nof an existing Tree individual.</p>\n\n<p>(This method is not abstract as it is not required in HalfCreator)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tree_ind</strong> (Tree):\nIndividual to create the tree representation for</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">random_function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">FunctionNode</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">random_terminal</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TerminalNode</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.evaluators", "modulename": "eckity.evaluators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.individual_evaluator", "modulename": "eckity.evaluators.individual_evaluator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.individual_evaluator.IndividualEvaluator", "modulename": "eckity.evaluators.individual_evaluator", "qualname": "IndividualEvaluator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.evaluators.individual_evaluator.IndividualEvaluator.evaluate", "modulename": "eckity.evaluators.individual_evaluator", "qualname": "IndividualEvaluator.evaluate", "kind": "function", "doc": "<p>Updates the fitness score of the given individuals, then returns the best individual</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Individual):\nthe current individual to evaluate its fitness</li>\n<li><strong>environment_individuals</strong> (list of Individuals):\nthe individuals in the current individual's environment\nthose individuals will affect the current individual's fitness</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Individual</strong>: the individual with the best fitness out of the given individuals</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span>, </span><span class=\"param\"><span class=\"n\">environment_individuals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.evaluators.individual_evaluator.IndividualEvaluator.apply_operator", "modulename": "eckity.evaluators.individual_evaluator", "qualname": "IndividualEvaluator.apply_operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.evaluators.population_evaluator", "modulename": "eckity.evaluators.population_evaluator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator.executor", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator.executor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator.apply_operator", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator.apply_operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator.set_executor", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator.set_executor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">Executor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.evaluators.simple_individual_evaluator", "modulename": "eckity.evaluators.simple_individual_evaluator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator", "modulename": "eckity.evaluators.simple_individual_evaluator", "qualname": "SimpleIndividualEvaluator", "kind": "class", "doc": "<p>Computes fitness value for the given individuals.\nAll simple classes assume only one sub-population.\nEvaluates each individual separately.\nYou will need to extend this class with your fitness evaluation methods.</p>\n", "bases": "eckity.evaluators.individual_evaluator.IndividualEvaluator"}, {"fullname": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator.evaluate", "modulename": "eckity.evaluators.simple_individual_evaluator", "qualname": "SimpleIndividualEvaluator.evaluate", "kind": "function", "doc": "<p>Updates the fitness score of the given individuals, then returns the best individual</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Individual):\nthe current individual to evaluate its fitness</li>\n<li><strong>environment_individuals</strong> (list of Individuals):\nthe individuals in the current individual's environment\nthose individuals will affect the current individual's fitness\n(not used in simple case)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Individual</strong>: the individual with the best fitness of the given individuals</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span>, </span><span class=\"param\"><span class=\"n\">environment_individuals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator.evaluate_individual", "modulename": "eckity.evaluators.simple_individual_evaluator", "qualname": "SimpleIndividualEvaluator.evaluate_individual", "kind": "function", "doc": "<p>Evaluate the fitness score for the given individual.\nThis function must be implemented by subclasses of this class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Individual):\nThe individual to compute the fitness for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The evaluated fitness value for the given individual</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.evaluators.simple_population_evaluator", "modulename": "eckity.evaluators.simple_population_evaluator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.simple_population_evaluator.SimplePopulationEvaluator", "modulename": "eckity.evaluators.simple_population_evaluator", "qualname": "SimplePopulationEvaluator", "kind": "class", "doc": "<p>Computes fitness value for the whole population.\nAll simple classes assume only one sub-population.</p>\n", "bases": "eckity.evaluators.population_evaluator.PopulationEvaluator"}, {"fullname": "eckity.evaluators.simple_population_evaluator.SimplePopulationEvaluator.__init__", "modulename": "eckity.evaluators.simple_population_evaluator", "qualname": "SimplePopulationEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">executor_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;map&#39;</span></span>)</span>"}, {"fullname": "eckity.evaluators.simple_population_evaluator.SimplePopulationEvaluator.executor_method", "modulename": "eckity.evaluators.simple_population_evaluator", "qualname": "SimplePopulationEvaluator.executor_method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.event_based_operator", "modulename": "eckity.event_based_operator", "kind": "module", "doc": "<p>This module implements the Operator class</p>\n"}, {"fullname": "eckity.event_based_operator.Operator", "modulename": "eckity.event_based_operator", "qualname": "Operator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.before_after_publisher.BeforeAfterPublisher, abc.ABC"}, {"fullname": "eckity.event_based_operator.Operator.applied_individuals", "modulename": "eckity.event_based_operator", "qualname": "Operator.applied_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.event_based_operator.Operator.arity", "modulename": "eckity.event_based_operator", "qualname": "Operator.arity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.event_based_operator.Operator.apply_operator", "modulename": "eckity.event_based_operator", "qualname": "Operator.apply_operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.initialize", "modulename": "eckity.event_based_operator", "qualname": "Operator.initialize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.act", "modulename": "eckity.event_based_operator", "qualname": "Operator.act", "kind": "function", "doc": "<p>Applies the subclass-specific operator on the given payload,\nand publishing events before and after the operator execution</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>payload:</strong>: operands to apply the operator on</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>the return value of the operator implemented in the sub-class</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.get_operator_arity", "modulename": "eckity.event_based_operator", "qualname": "Operator.get_operator_arity", "kind": "function", "doc": "<p>Getter method for the number of operands this operator is applied on\nFor example, a crossover that exchanges subtrees of 2 individuals will have an arity of 2</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: number of operands this operator is applied on</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.event_name_to_data", "modulename": "eckity.event_based_operator", "qualname": "Operator.event_name_to_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness", "modulename": "eckity.fitness", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.fitness", "modulename": "eckity.fitness.fitness", "kind": "module", "doc": "<p>This module implements the class <code>Fitness</code></p>\n"}, {"fullname": "eckity.fitness.fitness.Fitness", "modulename": "eckity.fitness.fitness", "qualname": "Fitness", "kind": "class", "doc": "<p>This class is responsible for handling the fitness score of some Individual\n(checking if fitness is evaluated, comparing fitness scores with other individuals etc.)</p>\n\n<p>is_evaluated: bool\n    declares if fitness score is evaluated and updated in the current generation</p>\n\n<p>higher_is_better: bool\n    declares the fitness direction.\n    i.e., if it should be minimized or maximized</p>\n\n<p>cache: bool\n    declares whether the fitness score should reset at the end of each generation</p>\n\n<p>is_relative_fitness: bool\n    declares whether the fitness score is absolute or relative</p>\n", "bases": "abc.ABC"}, {"fullname": "eckity.fitness.fitness.Fitness.is_relative_fitness", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.is_relative_fitness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.fitness.Fitness.cache", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.fitness.Fitness.higher_is_better", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.higher_is_better", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.fitness.Fitness.get_pure_fitness", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.get_pure_fitness", "kind": "function", "doc": "<p>Returns the pure fitness score of the individual (before applying balancing methods like bloat control)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.get_augmented_fitness", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.get_augmented_fitness", "kind": "function", "doc": "<p>Returns the fixed fitness score of the individual (after applying balancing methods like bloat control)\nBy default, returns the pure fitness score</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Individual):\nthe individual instance that holds this Fitness instance</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Fixed fitness value for the given individual</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.better_than", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.better_than", "kind": "function", "doc": "<p>Compares between the current fitness of the individual <code>ind</code> to the fitness score <code>other_fitness</code> of <code>other_ind</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ind</strong> (Individual):\nthe individual instance that holds this Fitness instance</li>\n<li><strong>other_fitness</strong> (Fitness):\nthe Fitness instance of the <code>other</code> individual</li>\n<li><strong>other_ind</strong> (Individual):\nthe <code>other</code> individual instance which is being compared to the individual <code>ind</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this fitness is better than the <code>other</code> fitness, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span>, </span><span class=\"param\"><span class=\"n\">other_ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.equal_to", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.equal_to", "kind": "function", "doc": "<p>Compares between the current fitness of the individual <code>ind</code> to the fitness score <code>other_fitness</code> of <code>other_ind</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ind</strong> (Individual):\nthe individual instance that holds this Fitness instance</li>\n<li><strong>other_fitness</strong> (Fitness):\nthe Fitness instance of the <code>other</code> individual</li>\n<li><strong>other_ind</strong> (Individual):\nthe <code>other</code> individual instance which is being compared to the individual <code>ind</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this fitness is equal to the <code>other</code> fitness, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span>, </span><span class=\"param\"><span class=\"n\">other_ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.set_not_evaluated", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.set_not_evaluated", "kind": "function", "doc": "<p>Set this fitness score status to be not evaluated</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.is_fitness_evaluated", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.is_fitness_evaluated", "kind": "function", "doc": "<p>Check this fitness score status (if the fitness score is updated)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this fitness is evaluated, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.gp_fitness", "modulename": "eckity.fitness.gp_fitness", "kind": "module", "doc": "<p>This module implements the <code>GPFitness</code> class</p>\n"}, {"fullname": "eckity.fitness.gp_fitness.GPFitness", "modulename": "eckity.fitness.gp_fitness", "qualname": "GPFitness", "kind": "class", "doc": "<p>This class is responsible for handling the fitness score of some Individual\n(checking if fitness is evaluated, comparing fitness scores with other individuals etc.)</p>\n\n<p>In the simple case, each individual holds a float fitness score\nGPFitness also adds bloat control to the fitness score, by \"punishing\" the fitness score of large trees</p>\n\n<p>fitness: float\n    the fitness score of an individual</p>\n\n<p>higher_is_better: bool\n    declares the fitness direction.\n    i.e., if it should be minimized or maximized</p>\n\n<p>cache: bool\n    declares whether the fitness score should reset at the end of each generation</p>\n\n<p>is_relative_fitness: bool\n    declares whether the fitness score is absolute or relative</p>\n\n<p>bloat_weight: float\n    the weight of the bloat control fitness reduction</p>\n", "bases": "eckity.fitness.simple_fitness.SimpleFitness"}, {"fullname": "eckity.fitness.gp_fitness.GPFitness.__init__", "modulename": "eckity.fitness.gp_fitness", "qualname": "GPFitness.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fitness</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">higher_is_better</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_relative_fitness</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">bloat_weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span>)</span>"}, {"fullname": "eckity.fitness.gp_fitness.GPFitness.bloat_weight", "modulename": "eckity.fitness.gp_fitness", "qualname": "GPFitness.bloat_weight", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.gp_fitness.GPFitness.get_augmented_fitness", "modulename": "eckity.fitness.gp_fitness", "qualname": "GPFitness.get_augmented_fitness", "kind": "function", "doc": "<p>Returns the fixed fitness of a given individual, after including bloat control</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Individual):\na GP Tree to apply bloat control on</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: augmented fitness score after applying bloat control</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness", "modulename": "eckity.fitness.simple_fitness", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness", "kind": "class", "doc": "<p>This class is responsible for handling the fitness score of some Individual\n(checking if fitness is evaluated, comparing fitness scores with other individuals etc.)</p>\n\n<p>All simple classes assume only one sub-population.\nIn the simple case, each individual holds a float fitness score</p>\n\n<p>fitness: float\n    the fitness score of an individual</p>\n\n<p>higher_is_better: bool\n    declares the fitness direction.\n    i.e., if it should be minimized or maximized</p>\n\n<p>cache: bool\n    declares whether the fitness score should reset at the end of each generation</p>\n\n<p>is_relative_fitness: bool\n    declares whether the fitness score is absolute or relative</p>\n", "bases": "eckity.fitness.fitness.Fitness"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.__init__", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fitness</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">higher_is_better</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_relative_fitness</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.fitness", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.fitness", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.set_fitness", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.set_fitness", "kind": "function", "doc": "<p>Updates the fitness score to <code>fitness</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitness</strong> (float):\nthe fitness score to be updated</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.get_pure_fitness", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.get_pure_fitness", "kind": "function", "doc": "<p>Returns the pure fitness score of the individual (before applying balancing methods like bloat control)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: fitness score of the individual</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.set_not_evaluated", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.set_not_evaluated", "kind": "function", "doc": "<p>Set this fitness score status to be not evaluated</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.check_comparable_fitness_scores", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.check_comparable_fitness_scores", "kind": "function", "doc": "<p>Check if <code>this</code> fitness score is comparable to <code>other_fitness</code></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if fitness scores are comparable, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.better_than", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.better_than", "kind": "function", "doc": "<p>Compares between the current fitness of the individual <code>ind</code> to the fitness score <code>other_fitness</code> of <code>other_ind</code>\nIn the simple case, compares the float fitness scores of the two individuals</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ind</strong> (Individual):\nthe individual instance that holds this Fitness instance</li>\n<li><strong>other_fitness</strong> (Fitness):\nthe Fitness instance of the <code>other</code> individual</li>\n<li><strong>other_ind</strong> (Individual):\nthe <code>other</code> individual instance which is being compared to the individual <code>ind</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this fitness score is better than the <code>other</code> fitness score, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span>, </span><span class=\"param\"><span class=\"n\">other_ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.equal_to", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.equal_to", "kind": "function", "doc": "<p>Compares between the current fitness of the individual <code>ind</code> to the fitness score <code>other_fitness</code> of <code>other_ind</code>\nIn the simple case, compares the float fitness scores of the two individuals</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ind</strong> (Individual):\nthe individual instance that holds this Fitness instance</li>\n<li><strong>other_fitness</strong> (Fitness):\nthe Fitness instance of the <code>other</code> individual</li>\n<li><strong>other_ind</strong> (Individual):\nthe <code>other</code> individual instance which is being compared to the individual <code>ind</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this fitness score is equal to the <code>other</code> fitness score, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span>, </span><span class=\"param\"><span class=\"n\">other_ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings", "modulename": "eckity.genetic_encodings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga", "modulename": "eckity.genetic_encodings.ga", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.bit_string_vector", "modulename": "eckity.genetic_encodings.ga.bit_string_vector", "kind": "module", "doc": "<p>This module implements the BitStringVector class.</p>\n"}, {"fullname": "eckity.genetic_encodings.ga.bit_string_vector.BitStringVector", "modulename": "eckity.genetic_encodings.ga.bit_string_vector", "qualname": "BitStringVector", "kind": "class", "doc": "<p>A Bit Vector individual representation for Genetic Algorithms operations.\nIt is represented by a list of ones and zeros.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitness</strong> (Fitness):\nFitness handler class.\nResponsible of keeping the fitness value of the individual.</li>\n<li><strong>length</strong> (int):\nVector length - the number of cells in the vector.</li>\n<li><strong>bounds</strong> (tuple or list of tuples):\nMin/Max values for each vector cell (if of length n),\nor the minimum and maximum (if of length 1).</li>\n</ul>\n", "bases": "eckity.genetic_encodings.ga.vector_individual.Vector"}, {"fullname": "eckity.genetic_encodings.ga.bit_string_vector.BitStringVector.__init__", "modulename": "eckity.genetic_encodings.ga.bit_string_vector", "qualname": "BitStringVector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">vector</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.genetic_encodings.ga.bit_string_vector.BitStringVector.get_random_number_in_bounds", "modulename": "eckity.genetic_encodings.ga.bit_string_vector", "qualname": "BitStringVector.get_random_number_in_bounds", "kind": "function", "doc": "<p>Return a random number of available cell values (0 or 1),\nwith equal probability.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\ncell index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: random value according to bounds field</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.bit_string_vector.BitStringVector.bit_flip", "modulename": "eckity.genetic_encodings.ga.bit_string_vector", "qualname": "BitStringVector.bit_flip", "kind": "function", "doc": "<p>Flip the bit in the given index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.float_vector", "modulename": "eckity.genetic_encodings.ga.float_vector", "kind": "module", "doc": "<p>This module implements the FloatVector class.</p>\n"}, {"fullname": "eckity.genetic_encodings.ga.float_vector.FloatVector", "modulename": "eckity.genetic_encodings.ga.float_vector", "qualname": "FloatVector", "kind": "class", "doc": "<p>A Float Vector individual representation for Genetic Algorithms operations.\nIt is represented by a list of floats.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitness</strong> (Fitness):\nFitness handler class, responsible of keeping the fitness value of the individual.</li>\n<li><strong>length</strong> (int):\nVector length - the number of cells in the vector.</li>\n<li><strong>bounds</strong> (tuple or list of tuples):\nMin/Max values for each vector cell (if of length n), or the minimum and maximum (if of length 1).</li>\n</ul>\n", "bases": "eckity.genetic_encodings.ga.vector_individual.Vector"}, {"fullname": "eckity.genetic_encodings.ga.float_vector.FloatVector.__init__", "modulename": "eckity.genetic_encodings.ga.float_vector", "qualname": "FloatVector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fitness</span>,</span><span class=\"param\">\t<span class=\"n\">length</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">vector</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.genetic_encodings.ga.float_vector.FloatVector.get_random_number_in_bounds", "modulename": "eckity.genetic_encodings.ga.float_vector", "qualname": "FloatVector.get_random_number_in_bounds", "kind": "function", "doc": "<p>Return a random number from possible cell values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\ncell index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: random value according to bounds field</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.float_vector.FloatVector.get_random_number_with_gauss", "modulename": "eckity.genetic_encodings.ga.float_vector", "qualname": "FloatVector.get_random_number_with_gauss", "kind": "function", "doc": "<p>Return a random number from possible cell values, with an addition of gaussian noise.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\ncell index</li>\n<li><strong>mu</strong> (float):\ngaussian mean</li>\n<li><strong>sigma</strong> (float):\ngaussian standard deviation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: random value according to bounds field and gauss parameters</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">sigma</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.int_vector", "modulename": "eckity.genetic_encodings.ga.int_vector", "kind": "module", "doc": "<p>This module implements the IntVector class.</p>\n"}, {"fullname": "eckity.genetic_encodings.ga.int_vector.MIN_BOUND", "modulename": "eckity.genetic_encodings.ga.int_vector", "qualname": "MIN_BOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "2147483647"}, {"fullname": "eckity.genetic_encodings.ga.int_vector.MAX_BOUND", "modulename": "eckity.genetic_encodings.ga.int_vector", "qualname": "MAX_BOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "-2147483648"}, {"fullname": "eckity.genetic_encodings.ga.int_vector.IntVector", "modulename": "eckity.genetic_encodings.ga.int_vector", "qualname": "IntVector", "kind": "class", "doc": "<p>An Integer Vector individual representation for Genetic Algorithms operations.\nIt is represented by a list of integers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitness</strong> (Fitness):\nFitness handler class, responsible of keeping the fitness value of the individual.</li>\n<li><strong>length</strong> (int):\nVector length - the number of cells in the vector.</li>\n<li><strong>bounds</strong> (tuple or list of tuples):\nMin/Max values for each vector cell (if of length n), or the minimum and maximum (if of length 1).</li>\n</ul>\n", "bases": "eckity.genetic_encodings.ga.vector_individual.Vector"}, {"fullname": "eckity.genetic_encodings.ga.int_vector.IntVector.__init__", "modulename": "eckity.genetic_encodings.ga.int_vector", "qualname": "IntVector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fitness</span>,</span><span class=\"param\">\t<span class=\"n\">length</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2147483647</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2147483648</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">vector</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.genetic_encodings.ga.int_vector.IntVector.get_random_number_in_bounds", "modulename": "eckity.genetic_encodings.ga.int_vector", "qualname": "IntVector.get_random_number_in_bounds", "kind": "function", "doc": "<p>Return a random number from possible cell values, according to bounds.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\ncell index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: random value according to bounds field</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests", "modulename": "eckity.genetic_encodings.ga.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_vector_direct_initialization", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_vector_direct_initialization", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_bad_bounds", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_bad_bounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_replace_vector_part_bit_index0", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_replace_vector_part_bit_index0", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_replace_vector_part_bit_middle_index", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_replace_vector_part_bit_middle_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_bit_flip", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_bit_flip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_bit_get_rand_num_single_bounds", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_bit_get_rand_num_single_bounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_get_vector_part_last_cell", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_get_vector_part_last_cell", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_clone", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_clone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_bit_string_vector.TestBitStringVector.test_parents", "modulename": "eckity.genetic_encodings.ga.tests.test_bit_string_vector", "qualname": "TestBitStringVector.test_parents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_float_vector", "modulename": "eckity.genetic_encodings.ga.tests.test_float_vector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_float_vector.TestFloatVector", "modulename": "eckity.genetic_encodings.ga.tests.test_float_vector", "qualname": "TestFloatVector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_float_vector.TestFloatVector.test_vector_direct_initialization", "modulename": "eckity.genetic_encodings.ga.tests.test_float_vector", "qualname": "TestFloatVector.test_vector_direct_initialization", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_float_vector.TestFloatVector.test_bad_bounds", "modulename": "eckity.genetic_encodings.ga.tests.test_float_vector", "qualname": "TestFloatVector.test_bad_bounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_float_vector.TestFloatVector.test_get_vector_part_last_cell", "modulename": "eckity.genetic_encodings.ga.tests.test_float_vector", "qualname": "TestFloatVector.test_get_vector_part_last_cell", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_float_vector.TestFloatVector.test_clone", "modulename": "eckity.genetic_encodings.ga.tests.test_float_vector", "qualname": "TestFloatVector.test_clone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector.TestIntVector", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "qualname": "TestIntVector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector.TestIntVector.test_vector_direct_initialization", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "qualname": "TestIntVector.test_vector_direct_initialization", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector.TestIntVector.test_bad_bounds", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "qualname": "TestIntVector.test_bad_bounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector.TestIntVector.test_int_get_rand_num_single_bounds", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "qualname": "TestIntVector.test_int_get_rand_num_single_bounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector.TestIntVector.test_int_get_rand_num_multi_bounds", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "qualname": "TestIntVector.test_int_get_rand_num_multi_bounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector.TestIntVector.test_get_vector_part_last_cell", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "qualname": "TestIntVector.test_get_vector_part_last_cell", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.tests.test_int_vector.TestIntVector.test_clone", "modulename": "eckity.genetic_encodings.ga.tests.test_int_vector", "qualname": "TestIntVector.test_clone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual", "modulename": "eckity.genetic_encodings.ga.vector_individual", "kind": "module", "doc": "<p>This module implements the vector class.</p>\n"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.logger", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.genetic_encodings.ga.vector_individual (INFO)&gt;"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector", "kind": "class", "doc": "<p>A Vector individual representation for Genetic Algorithms operations.\nIt is represented by a list of values (integers, floats, etc.)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitness</strong> (Fitness):\nFitness handler class, responsible of keeping the fitness value of the individual.</li>\n<li><strong>length</strong> (int):\nVector length - the number of cells in the vector.</li>\n<li><strong>bounds</strong> (list of tuples):\nMin/Max values for each vector cell (if of length n), or the minimum and maximum (if of length 1).</li>\n</ul>\n", "bases": "eckity.individual.Individual"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.__init__", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"n\">vector</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">update_parents</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.bounds", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.bounds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.length", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.size", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.size", "kind": "function", "doc": "<p>Compute size of vector.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: vector size (= number of cells).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.get_bounds", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.get_bounds", "kind": "function", "doc": "<p>Get vector bounds</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple of (Number, Number)</strong>: vector bounds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.check_if_in_bounds", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.check_if_in_bounds", "kind": "function", "doc": "<p>Check if all vector cells are in bounds</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if all vector cells are in bounds, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.add_cell", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.add_cell", "kind": "function", "doc": "<p>Add a new cell to the vector (and increase its size by 1)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.empty_vector", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.empty_vector", "kind": "function", "doc": "<p>Convert the vector to an empty vector</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.set_vector", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.set_vector", "kind": "function", "doc": "<p>Set genome to the given vector genome</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vector</strong> (list):\n<code>other</code> vector genome</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.get_vector", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.get_vector", "kind": "function", "doc": "<p>Return self vector genome</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: vector genome</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.random_vector_part", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.random_vector_part", "kind": "function", "doc": "<p>Get a random part of the vector</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: sub-vector genome</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.replace_vector_part_random", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.replace_vector_part_random", "kind": "function", "doc": "<p>Replace a given vector part in a random position</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inserted_part</strong> (list):\nnew vector part to be inserted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: previous vector part of this vector genome</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inserted_part</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.replace_vector_part", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.replace_vector_part", "kind": "function", "doc": "<p>Replace a given vector part in a given position</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inserted_part</strong> (list):\nnew vector part to be inserted</li>\n<li><strong>start_index</strong> (int):\nstarting position to insert the new vector part from</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: previous vector part of this vector genome</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inserted_part</span>, </span><span class=\"param\"><span class=\"n\">start_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.get_vector_part", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.get_vector_part", "kind": "function", "doc": "<p>Return vector part from <code>index</code> to <code>end_i</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\nstarting index</li>\n<li><strong>end_i</strong> (int):\nend index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: sub-vector genome</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">end_i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.cell_value", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.cell_value", "kind": "function", "doc": "<p>Get vector cell value in a given index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\ncell index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: vector cell value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.set_cell_value", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.set_cell_value", "kind": "function", "doc": "<p>Set vector cell value in a given index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\ncell index</li>\n<li><strong>value</strong> (object):\nnew cell value</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.get_random_number_in_bounds", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.get_random_number_in_bounds", "kind": "function", "doc": "<p>Returns a random value in vector bounds</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\ncell index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: vector cell value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.execute", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.execute", "kind": "function", "doc": "<p>Execute the vector.\nInput is a numpy array or keyword arguments (but not both).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong> (arguments):\nA numpy array, this is mostly relevant to GP representation.</li>\n<li><strong>kwargs</strong> (keyword arguments):\nInput to program, this is mostly relevant to GP representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Vector (genome) of this individual.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.ga.vector_individual.Vector.show", "modulename": "eckity.genetic_encodings.ga.vector_individual", "qualname": "Vector.show", "kind": "function", "doc": "<p>Print out a simple textual representation of the vector.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp", "modulename": "eckity.genetic_encodings.gp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree", "modulename": "eckity.genetic_encodings.gp.tree", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "kind": "module", "doc": "<p>This module implements the tree class.</p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.logger", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.genetic_encodings.gp.tree.tree_individual (INFO)&gt;"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree", "kind": "class", "doc": "<p>A tree optimized for genetic programming operations.\nIt is represented by a list of nodes in depth-first order.\nThere are two types of nodes: functions and terminals.</p>\n\n<p>(tree is not meant as a stand-alone,\nparameters are supplied through the call from the Tree Creators)</p>\n", "bases": "eckity.individual.Individual"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.__init__", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.__init__", "kind": "function", "doc": "<p>GP Tree Individual.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitness</strong> (Fitness):\nManages fitness state, by default GPFitness</li>\n<li><strong>function_set</strong> (List[Callable], default=None):\nList of functions used as internal nodes in the GP tree.</li>\n<li><strong>terminal_set</strong> (Union[Dict[Any, type], List[Any]], optional):\nMapping of terminal nodes and their types.\nIn the untyped case, all types are None.\nLists are treated as untyped, and will be assigned None.</li>\n<li><strong>tree</strong> (List[TreeNode], optional):\nActual tree representation, by default None</li>\n<li><strong>erc_range</strong> (tuple of float or int, optional):\nRange of Ephemeral random constant values, by default None</li>\n<li><strong>root_type</strong> (type, optional):\nRoot node type, by default None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If typed function is used with untyped terminals.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fitness</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"o\">.</span><span class=\"n\">Fitness</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"o\">.</span><span class=\"n\">gp_fitness</span><span class=\"o\">.</span><span class=\"n\">GPFitness</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">function_set</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_set</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">erc_range</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.erc_range", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.erc_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.function_set", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.function_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.terminal_set", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.terminal_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.tree", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.root_type", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.root_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.root", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": eckity.genetic_encodings.gp.tree.tree_node.TreeNode"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.erc_type", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.erc_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[int, float, NoneType]"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.size", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.size", "kind": "function", "doc": "<p>Compute size of tree.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: tree size (= number of nodes).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.add_tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.add_tree", "kind": "function", "doc": "<p>Add a node to the tree following the defined type constrains</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.empty_tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.empty_tree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.depth", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.depth", "kind": "function", "doc": "<p>Compute depth of tree (maximal path length to a leaf).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: tree depth.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.random_function", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.random_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">FunctionNode</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.random_terminal", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.random_terminal", "kind": "function", "doc": "<p>Select a random terminal, including constants from ERC range</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TerminalNode</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.execute", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.execute", "kind": "function", "doc": "<p>Execute the program (tree).\nInput is a numpy array or keyword arguments (but not both).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong> (arguments):\nA numpy array.</li>\n<li><strong>kwargs</strong> (keyword arguments):\nInput to program, including every variable\nin the terminal set as a keyword argument.\nFor example, if <code>terminal_set=['x', 'y', 'z']</code>\nthen call <code>execute(x=..., y=..., z=...)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Result of tree execution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.filter_tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.filter_tree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filter_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.get_random_numeric_node", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.get_random_numeric_node", "kind": "function", "doc": "<p>Get a random leaf node of the tree.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node_type</strong> (type, default=None):\nType of node to return.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>TreeNode</strong>: Random leaf node.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TerminalNode</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.random_subtree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.random_subtree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.replace_subtree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.replace_subtree", "kind": "function", "doc": "<p>Replace the subtree starting at <code>index</code> with <code>subtree</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtree - new subtree to replace the existing subtree in the tree</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">old_subtree</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">new_subtree</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">tree_node</span><span class=\"o\">.</span><span class=\"n\">TreeNode</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.show", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.show", "kind": "function", "doc": "<p>Print out a simple textual representation of the tree.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.TreeNode", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "TreeNode", "kind": "class", "doc": "<p>GP Node</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>node_type</strong> (type):\nnode type</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.TreeNode.node_type", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "TreeNode.node_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.FunctionNode", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "FunctionNode", "kind": "class", "doc": "<p>GP Node</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>node_type</strong> (type):\nnode type</li>\n</ul>\n", "bases": "TreeNode"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.FunctionNode.__init__", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "FunctionNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span>)</span>"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.FunctionNode.n_args", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "FunctionNode.n_args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.FunctionNode.function", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "FunctionNode.function", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.TerminalNode", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "TerminalNode", "kind": "class", "doc": "<p>GP Node</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>node_type</strong> (type):\nnode type</li>\n</ul>\n", "bases": "TreeNode"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.TerminalNode.__init__", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "TerminalNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_node.TerminalNode.value", "modulename": "eckity.genetic_encodings.gp.tree.tree_node", "qualname": "TerminalNode.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.utils", "modulename": "eckity.genetic_encodings.gp.tree.utils", "kind": "module", "doc": "<p>This module implements some utility functions.</p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.utils.create_terminal_set", "modulename": "eckity.genetic_encodings.gp.tree.utils", "qualname": "create_terminal_set", "kind": "function", "doc": "<p>Create a terminal set from a 2D-shaped numpy array.</p>\n\n<p>Example: </p>\n\n<pre><code>X = array([[  4,   7,  -7, -10],  \n\n           [  7,  -3,   3,  -8],  \n\n           [  8,  -5,  -3,  -1]])\n</code></pre>\n\n<p>Returns the list: </p>\n\n<pre><code>['x0', 'x1', 'x2', 'x3']\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (2d numpy array):\nThe array from which we wish to extract features -- which will become terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Terminal set (a list).</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">typed</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.utils.generate_args", "modulename": "eckity.genetic_encodings.gp.tree.utils", "qualname": "generate_args", "kind": "function", "doc": "<p>Generate keyword arguments from a 2d array for passing to GPTree.execute.</p>\n\n<p>Example: </p>\n\n<pre><code>X = array([[  4,   7,  -7, -10],  \n\n           [  7,  -3,   3,  -8],  \n\n           [  8,  -5,  -3,  -1]])\n</code></pre>\n\n<p>Returns the dict: </p>\n\n<pre><code>{'x0': array([4, 7, 8]), \n\n 'x1': array([ 7, -3, -5]), \n\n 'x2': array([-7,  3, -3]), \n\n 'x3': array([-10,  -8,  -1])}\n</code></pre>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>kwargs</strong> (dict):\nA keyword dictionary that includes a value for every variable x_i in the terminal set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.utils.get_func_types", "modulename": "eckity.genetic_encodings.gp.tree.utils", "qualname": "get_func_types", "kind": "function", "doc": "<p>Return list of function types in the following format:\n[type_arg_1, type_arg_2, ..., type_arg_n, return_type]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f</strong> (Callable):\nfunction (builtin or user-defined)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>List[type]</strong>: List of function types, sorted by argument order\nwith the return type as the last element.\nFor untyped functions, None is used.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_func_types</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"go\">[int, float, float]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_func_types</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"go\">[None, None, None]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.utils.get_return_type", "modulename": "eckity.genetic_encodings.gp.tree.utils", "qualname": "get_return_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">type</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators", "modulename": "eckity.genetic_operators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers", "modulename": "eckity.genetic_operators.crossovers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover", "kind": "class", "doc": "<p>Genetic operator that has a chance of failing.</p>\n\n<p>For example, adding a gaussian noise to a FloatVector cell\nmight exceed the legal bounds of the vector.\nIn that case, the Gauss Mutation fails.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float):\nthe probability of the operator to be applied</li>\n<li><strong>arity</strong> (int):\nnumber of individuals to be applied on</li>\n<li><strong>events</strong> (list of strings):\nevents to be published before, after and during the operator</li>\n<li><strong>attempts</strong> (int):\nnumber of attempts to be made during the operator execution</li>\n</ul>\n", "bases": "eckity.genetic_operators.failable_operator.FailableOperator"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover.__init__", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover.individuals", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover.individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover.applied_individuals", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover.applied_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover.attempt_operator", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover.attempt_operator", "kind": "function", "doc": "<p>Perform subtree crossover between a list of trees in a cyclic manner.\nMeaning, the second individual will have a subtree from the first,\nand the first individual will have a subtree from the last individual.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>payload</strong> (List[Individual]):\nList of Trees to perform crossover on</li>\n<li><p><strong>individual</strong> (Tree):</p></li>\n<li><p><strong>tree individual to perform crossover on</strong></p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>List</strong>: List of individuals after crossover (modified in-place)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">attempt_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "modulename": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.vector_k_point_crossover.VectorKPointsCrossover", "modulename": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "qualname": "VectorKPointsCrossover", "kind": "class", "doc": "<p>Abstract class for genetic operators.\nEach operator has a probability of being applied each generation.</p>\n\n<p>Genetic operators are applied in-place.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of being applied each generation, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nnumber of individuals required for the operator, by default 0</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events that the operator publishes, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.genetic_operator.GeneticOperator"}, {"fullname": "eckity.genetic_operators.crossovers.vector_k_point_crossover.VectorKPointsCrossover.__init__", "modulename": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "qualname": "VectorKPointsCrossover.__init__", "kind": "function", "doc": "<p>Vector K Point Crossover.</p>\n\n<p>Randomly chooses K points in the vector and swaps the parts\nof two vectors at these points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float):\nThe probability of the mutation operator to be applied</li>\n<li><strong>arity</strong> (int):\nThe number of individuals this mutation is applied on</li>\n<li><strong>k</strong> (int):\nNumber of points to cut the vector for the crossover.</li>\n<li><strong>events</strong> (list of strings):\nCustom events to be published by the mutation, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.crossovers.vector_k_point_crossover.VectorKPointsCrossover.individuals", "modulename": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "qualname": "VectorKPointsCrossover.individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.vector_k_point_crossover.VectorKPointsCrossover.applied_individuals", "modulename": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "qualname": "VectorKPointsCrossover.applied_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.vector_k_point_crossover.VectorKPointsCrossover.k", "modulename": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "qualname": "VectorKPointsCrossover.k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.vector_k_point_crossover.VectorKPointsCrossover.apply", "modulename": "eckity.genetic_operators.crossovers.vector_k_point_crossover", "qualname": "VectorKPointsCrossover.apply", "kind": "function", "doc": "<p>Attempt to perform the mutation operator</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong> (List[Vector]):\nindividuals to perform crossover on</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>List[Vector]</strong>: individuals after the crossover</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">individuals</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.failable_operator", "modulename": "eckity.genetic_operators.failable_operator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.failable_operator.FailableOperator", "modulename": "eckity.genetic_operators.failable_operator", "qualname": "FailableOperator", "kind": "class", "doc": "<p>Genetic operator that has a chance of failing.</p>\n\n<p>For example, adding a gaussian noise to a FloatVector cell\nmight exceed the legal bounds of the vector.\nIn that case, the Gauss Mutation fails.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float):\nthe probability of the operator to be applied</li>\n<li><strong>arity</strong> (int):\nnumber of individuals to be applied on</li>\n<li><strong>events</strong> (list of strings):\nevents to be published before, after and during the operator</li>\n<li><strong>attempts</strong> (int):\nnumber of attempts to be made during the operator execution</li>\n</ul>\n", "bases": "eckity.genetic_operators.genetic_operator.GeneticOperator"}, {"fullname": "eckity.genetic_operators.failable_operator.FailableOperator.attempts", "modulename": "eckity.genetic_operators.failable_operator", "qualname": "FailableOperator.attempts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.failable_operator.FailableOperator.apply", "modulename": "eckity.genetic_operators.failable_operator", "qualname": "FailableOperator.apply", "kind": "function", "doc": "<p>Apply the operator, with a chance of failing.</p>\n\n<p>Attempt to apply the operator <code>attempts</code> times,\nfinish by succeeding in one of the attempts or by failing\nall attempts and executing <code>on_fail</code> method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>payload</strong> (object):\nrelevant data for the operator (usually a list of individuals)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: result value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.failable_operator.FailableOperator.attempt_operator", "modulename": "eckity.genetic_operators.failable_operator", "qualname": "FailableOperator.attempt_operator", "kind": "function", "doc": "<p>A single attempt of the operator</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>payload</strong> (object):\nrelevant data for the operator (usually a list of individuals)</li>\n<li><strong>attempt_num</strong> (int):\ncurrent attempt number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>(bool, object)</strong>: tuple of (succeeded or not, result value)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">attempt_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.failable_operator.FailableOperator.on_fail", "modulename": "eckity.genetic_operators.failable_operator", "qualname": "FailableOperator.on_fail", "kind": "function", "doc": "<p>What to do when all operator attempts failed\nThis method is called once all operator attempts have failed\nBy default, this method does nothing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>payload</strong> (object):\nrelevant data for the failure handling mechanism\n(usually a list of individuals)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: failure handling mechanism, does nothing by default</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.genetic_operator", "modulename": "eckity.genetic_operators.genetic_operator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.genetic_operator.GeneticOperator", "modulename": "eckity.genetic_operators.genetic_operator", "qualname": "GeneticOperator", "kind": "class", "doc": "<p>Abstract class for genetic operators.\nEach operator has a probability of being applied each generation.</p>\n\n<p>Genetic operators are applied in-place.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of being applied each generation, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nnumber of individuals required for the operator, by default 0</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events that the operator publishes, by default None</li>\n</ul>\n", "bases": "eckity.event_based_operator.Operator, abc.ABC"}, {"fullname": "eckity.genetic_operators.genetic_operator.GeneticOperator.probability", "modulename": "eckity.genetic_operators.genetic_operator", "qualname": "GeneticOperator.probability", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.genetic_operator.GeneticOperator.apply_operator", "modulename": "eckity.genetic_operators.genetic_operator", "qualname": "GeneticOperator.apply_operator", "kind": "function", "doc": "<p>Apply the genetic operator with a certain probability.\nThe individuals are modified in-place, so it is not mandatory\nto return them.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong> (List[Individual]):\nIndividuals to apply the operator to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>List[Individual]</strong>: The individuals after applying the operator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individuals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.genetic_operator.GeneticOperator.apply", "modulename": "eckity.genetic_operators.genetic_operator", "qualname": "GeneticOperator.apply", "kind": "function", "doc": "<p>Apply the genetic operator to the individuals.\nThis method should be implemented by the subclasses.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong> (List[Individual]):\nIndividuals to apply the operator to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individuals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations", "modulename": "eckity.genetic_operators.mutations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ERCMutation", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ERCMutation", "kind": "class", "doc": "<p>Genetic operator that has a chance of failing.</p>\n\n<p>For example, adding a gaussian noise to a FloatVector cell\nmight exceed the legal bounds of the vector.\nIn that case, the Gauss Mutation fails.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float):\nthe probability of the operator to be applied</li>\n<li><strong>arity</strong> (int):\nnumber of individuals to be applied on</li>\n<li><strong>events</strong> (list of strings):\nevents to be published before, after and during the operator</li>\n<li><strong>attempts</strong> (int):\nnumber of attempts to be made during the operator execution</li>\n</ul>\n", "bases": "eckity.genetic_operators.failable_operator.FailableOperator"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ERCMutation.__init__", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ERCMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">mu</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ERCMutation.mu", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ERCMutation.mu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ERCMutation.sigma", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ERCMutation.sigma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ERCMutation.attempt_operator", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ERCMutation.attempt_operator", "kind": "function", "doc": "<p>Perform ephemeral random constant (ERC) mutation: select an ERC node at random\nand add Gaussian noise to it.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">attempt_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation.IdentityTransformation", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "qualname": "IdentityTransformation", "kind": "class", "doc": "<p>Abstract class for genetic operators.\nEach operator has a probability of being applied each generation.</p>\n\n<p>Genetic operators are applied in-place.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of being applied each generation, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nnumber of individuals required for the operator, by default 0</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events that the operator publishes, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.genetic_operator.GeneticOperator"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation.IdentityTransformation.__init__", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "qualname": "IdentityTransformation.__init__", "kind": "function", "doc": "<p>Basic mutation operator that does not change the individuals.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nProbability to apply each generation, by default 1.0</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events that the operator publishes, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation.IdentityTransformation.apply", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "qualname": "IdentityTransformation.apply", "kind": "function", "doc": "<p>Apply the genetic operator to the individuals.\nThis method should be implemented by the subclasses.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong> (List[Individual]):\nIndividuals to apply the operator to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individuals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation", "kind": "class", "doc": "<p>Genetic operator that has a chance of failing.</p>\n\n<p>For example, adding a gaussian noise to a FloatVector cell\nmight exceed the legal bounds of the vector.\nIn that case, the Gauss Mutation fails.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float):\nthe probability of the operator to be applied</li>\n<li><strong>arity</strong> (int):\nnumber of individuals to be applied on</li>\n<li><strong>events</strong> (list of strings):\nevents to be published before, after and during the operator</li>\n<li><strong>attempts</strong> (int):\nnumber of attempts to be made during the operator execution</li>\n</ul>\n", "bases": "eckity.genetic_operators.failable_operator.FailableOperator"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation.__init__", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">probability</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">init_depth</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation.init_depth", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation.init_depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation.tree_creator", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation.tree_creator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation.attempt_operator", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation.attempt_operator", "kind": "function", "doc": "<p>Perform subtree mutation: select a subtree at random\nto be replaced by a new, randomly generated subtree.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[bool, Any]</strong>: A tuple containing a boolean indicating whether the operator was\nsuccessful and a list of the individuals.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">attempt_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests", "modulename": "eckity.genetic_operators.mutations.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_subtree_mutation", "modulename": "eckity.genetic_operators.mutations.tests.test_subtree_mutation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_subtree_mutation.equal2ints", "modulename": "eckity.genetic_operators.mutations.tests.test_subtree_mutation", "qualname": "equal2ints", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_subtree_mutation.inc_int", "modulename": "eckity.genetic_operators.mutations.tests.test_subtree_mutation", "qualname": "inc_int", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_subtree_mutation.f_equal", "modulename": "eckity.genetic_operators.mutations.tests.test_subtree_mutation", "qualname": "f_equal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_subtree_mutation.test_subtree_mutation_success", "modulename": "eckity.genetic_operators.mutations.tests.test_subtree_mutation", "qualname": "test_subtree_mutation_success", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tree</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_vector_mutation", "modulename": "eckity.genetic_operators.mutations.tests.test_vector_mutation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_vector_mutation.TestMutations", "modulename": "eckity.genetic_operators.mutations.tests.test_vector_mutation", "qualname": "TestMutations", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_vector_mutation.TestMutations.test_uniform_float_n_point_mut", "modulename": "eckity.genetic_operators.mutations.tests.test_vector_mutation", "qualname": "TestMutations.test_uniform_float_n_point_mut", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_vector_mutation.TestMutations.test_gauss_float_n_point_mut", "modulename": "eckity.genetic_operators.mutations.tests.test_vector_mutation", "qualname": "TestMutations.test_gauss_float_n_point_mut", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_vector_mutation.TestMutations.test_gauss_mutation_success", "modulename": "eckity.genetic_operators.mutations.tests.test_vector_mutation", "qualname": "TestMutations.test_gauss_mutation_success", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.tests.test_vector_mutation.TestMutations.test_gauss_mutation_fail", "modulename": "eckity.genetic_operators.mutations.tests.test_vector_mutation", "qualname": "TestMutations.test_gauss_mutation_fail", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation", "kind": "class", "doc": "<p>Vector N Point Mutation.</p>\n\n<p>Randomly chooses N vector cells and performs a small change in their values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong> (int):\nNumber of mutation points.</li>\n<li><strong>probability</strong> (float):\nThe probability of the mutation operator to be applied</li>\n<li><strong>arity</strong> (int):\nThe number of individuals this mutation is applied on</li>\n<li><strong>cell_selector</strong> (callable):\nReturns the indices of the cells to mutate</li>\n<li><strong>mut_val_getter</strong> (callable):\nReturns a mutated value of a certain cell</li>\n<li><strong>success_checker</strong> (callable):\nChecks if a given (mutated) cell value is legal</li>\n<li><strong>events</strong> (list of strings):\nEvents to publish before/after the mutation operator</li>\n</ul>\n", "bases": "eckity.genetic_operators.failable_operator.FailableOperator"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">cell_selector</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mut_val_getter</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">success_checker</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">5</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.n", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.cell_selector", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.cell_selector", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.success_checker", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.success_checker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.mut_val_getter", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.mut_val_getter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.default_mut_val_getter", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.default_mut_val_getter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.default_success_checker", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.default_success_checker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">old_vec</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">new_vec</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.default_cell_selector", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.default_cell_selector", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.attempt_operator", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.attempt_operator", "kind": "function", "doc": "<p>Attempt to perform the mutation operator</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong> (list of vectors):\nvectors to mutate</li>\n<li><strong>attempt_num</strong> (int):\nCurrent attempt number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[bool, List[Vector]]</strong>: first return value determines if the the attempt succeeded\nsecond return value is the operator result</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">individuals</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">attempt_num</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">genetic_encodings</span><span class=\"o\">.</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">vector_individual</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation.on_fail", "modulename": "eckity.genetic_operators.mutations.vector_n_point_mutation", "qualname": "VectorNPointMutation.on_fail", "kind": "function", "doc": "<p>The required fix when the operator fails, does nothing by default and can be overridden by subclasses</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>payload</strong> (object):\nrelevant data for on_fail (usually the individuals that the mutation was attempted to be applied on)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorUniformOnePointMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorUniformOnePointMutation", "kind": "class", "doc": "<p>Uniform One Point Float Mutation.\nMutates a single cell of a float vector.\nMutated value is drawn from a uniform distribution,\nwith respect to the bounds of the vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorUniformOnePointMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorUniformOnePointMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorUniformNPointMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorUniformNPointMutation", "kind": "class", "doc": "<p>Uniform N Point Float Mutation.\nMutates exactly n cells of a float vector.\nMutated values are drawn from a uniform distribution,\nwith respect to the bounds of the vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorUniformNPointMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorUniformNPointMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorGaussOnePointMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorGaussOnePointMutation", "kind": "class", "doc": "<p>Gaussian One Point Float Mutation.\nMutates a single cell of a float vector.\nMutated value is drawn from a Gaussian\ndistribution with mean mu and standard deviation sigma.</p>\n\n<p>The mutation is repeated until the new value is legal\n(within the bounds of the vector), or the number of attempts\nis exceeded.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>mu</strong> (float, optional):\nGaussian distribution mean value, by default 0.0</li>\n<li><strong>sigma</strong> (float, optional):\nGaussian distribution std value, by default 1.0</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n<li><strong>attempts</strong> (int, optional):\nnumber of attempts till failure, by default 5</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorGaussOnePointMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorGaussOnePointMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">mu</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">5</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorGaussOnePointMutation.on_fail", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorGaussOnePointMutation.on_fail", "kind": "function", "doc": "<p>Handle gauss mutation failure by performing uniform mutation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorGaussNPointMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorGaussNPointMutation", "kind": "class", "doc": "<p>Gaussian N Point Float Mutation.\nMutates exactly n cells of a float vector.\nMutated values are drawn from a Gaussian\ndistribution with mean mu and standard deviation sigma.</p>\n\n<p>The mutation is repeated until the new value is legal\n(within the bounds of the vector), or the number of attempts\nis exceeded.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>mu</strong> (float, optional):\nGaussian distribution mean value, by default 0.0</li>\n<li><strong>sigma</strong> (float, optional):\nGaussian distribution std value, by default 1.0</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n<li><strong>attempts</strong> (int, optional):\nnumber of attempts till failure, by default 5</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorGaussNPointMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorGaussNPointMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">mu</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">5</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.FloatVectorGaussNPointMutation.on_fail", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "FloatVectorGaussNPointMutation.on_fail", "kind": "function", "doc": "<p>Handle gauss mutation failure by performing uniform mutation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.IntVectorOnePointMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "IntVectorOnePointMutation", "kind": "class", "doc": "<p>Uniform one point Int mutation.\nMutates a single cell of a int vector.\nMutated value is drawn from a uniform distribution,\nwith respect to the bounds of the vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.IntVectorOnePointMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "IntVectorOnePointMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">probability_for_each</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.IntVectorOnePointMutation.probability_for_each", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "IntVectorOnePointMutation.probability_for_each", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.IntVectorNPointMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "IntVectorNPointMutation", "kind": "class", "doc": "<p>Uniform N point Int mutation.\nMutates exactly n cells of a int vector.\nMutated value is drawn from a uniform distribution,\nwith respect to the bounds of the vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.IntVectorNPointMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "IntVectorNPointMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.BitStringVectorFlipMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "BitStringVectorFlipMutation", "kind": "class", "doc": "<p>One Point Bit-Flip Mutation\nFlips a single bit of a bit vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.BitStringVectorFlipMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "BitStringVectorFlipMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.BitStringVectorNFlipMutation", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "BitStringVectorNFlipMutation", "kind": "class", "doc": "<p>Multiple Bit-Flip Mutation\nTraverses the bit vector and flips each bit with a certain probability\n(probability_for_each).\nNote that this mutation is not guaranteed to flip an exact number of bits,\nas the flipping is done with a certain probability.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability</strong> (float, optional):\nprobability of the operator to occur, by default 1.0</li>\n<li><strong>arity</strong> (int, optional):\nindividuals required for the mutation, by default 1</li>\n<li><strong>events</strong> (List[str], optional):\ncustom events to be published by the mutation, by default None</li>\n<li><strong>probability_for_each=0.2</strong> (float, optional):\nprobability of flipping each bit, by default 0.2</li>\n</ul>\n", "bases": "eckity.genetic_operators.mutations.vector_n_point_mutation.VectorNPointMutation"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.BitStringVectorNFlipMutation.__init__", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "BitStringVectorNFlipMutation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">probability_for_each</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.mutations.vector_random_mutation.BitStringVectorNFlipMutation.probability_for_each", "modulename": "eckity.genetic_operators.mutations.vector_random_mutation", "qualname": "BitStringVectorNFlipMutation.probability_for_each", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections", "modulename": "eckity.genetic_operators.selections", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection", "modulename": "eckity.genetic_operators.selections.elitism_selection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.genetic_operators.selections.selection_method.SelectionMethod"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection.__init__", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_elites</span>, </span><span class=\"param\"><span class=\"n\">higher_is_better</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection.num_elites", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection.num_elites", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection.higher_is_better", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection.higher_is_better", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection.select", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection.select", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source_inds</span>, </span><span class=\"param\"><span class=\"n\">dest_inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.fp_selection", "modulename": "eckity.genetic_operators.selections.fp_selection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.fp_selection.FitnessProportionateSelection", "modulename": "eckity.genetic_operators.selections.fp_selection", "qualname": "FitnessProportionateSelection", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.genetic_operators.selections.selection_method.SelectionMethod"}, {"fullname": "eckity.genetic_operators.selections.fp_selection.FitnessProportionateSelection.__init__", "modulename": "eckity.genetic_operators.selections.fp_selection", "qualname": "FitnessProportionateSelection.__init__", "kind": "function", "doc": "<p>Fitness Proportionate Selection, AKA Roulette Wheel Selection.\nIn this method, the probability of selecting an individual from the\npopulation is proportional to its fitness score.\nIndividuals with higher fitness have a higher chance of being\nselected as parents. This selection method simulates a roulette wheel,\nwhere the size of the slice for each individual on the wheel is\ndetermined by its fitness score</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>higher_is_better</strong> (bool, optional):\nis higher fitness better or worse, by default False</li>\n<li><strong>events</strong> (List[str], optional):\nselection events, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">higher_is_better</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.selections.fp_selection.FitnessProportionateSelection.select", "modulename": "eckity.genetic_operators.selections.fp_selection", "qualname": "FitnessProportionateSelection.select", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source_inds</span>, </span><span class=\"param\"><span class=\"n\">dest_inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.selection_method", "modulename": "eckity.genetic_operators.selections.selection_method", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.higher_is_better", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.higher_is_better", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.selected_individuals", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.selected_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.apply_operator", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.apply_operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.select", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.select", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source_inds</span>, </span><span class=\"param\"><span class=\"n\">dest_inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.event_name_to_data", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.event_name_to_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tests", "modulename": "eckity.genetic_operators.selections.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tests.test_elitism", "modulename": "eckity.genetic_operators.selections.tests.test_elitism", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tests.test_elitism.test_selected_by", "modulename": "eckity.genetic_operators.selections.tests.test_elitism", "qualname": "test_selected_by", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tests.test_fp", "modulename": "eckity.genetic_operators.selections.tests.test_fp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tests.test_fp.test_selection_higher_is_better", "modulename": "eckity.genetic_operators.selections.tests.test_fp", "qualname": "test_selection_higher_is_better", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">higher_is_better</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tests.test_tournament", "modulename": "eckity.genetic_operators.selections.tests.test_tournament", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tests.test_tournament.TestTournament", "modulename": "eckity.genetic_operators.selections.tests.test_tournament", "qualname": "TestTournament", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tests.test_tournament.TestTournament.inds", "modulename": "eckity.genetic_operators.selections.tests.test_tournament", "qualname": "TestTournament.inds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tests.test_tournament.TestTournament.test_with_replacement", "modulename": "eckity.genetic_operators.selections.tests.test_tournament", "qualname": "TestTournament.test_with_replacement", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tests.test_tournament.TestTournament.test_without_replacement", "modulename": "eckity.genetic_operators.selections.tests.test_tournament", "qualname": "TestTournament.test_without_replacement", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tests.test_tournament.TestTournament.test_tournament_too_big", "modulename": "eckity.genetic_operators.selections.tests.test_tournament", "qualname": "TestTournament.test_tournament_too_big", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection", "modulename": "eckity.genetic_operators.selections.tournament_selection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "eckity.genetic_operators.selections.selection_method.SelectionMethod"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection.__init__", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection.__init__", "kind": "function", "doc": "<p>Tournament Selection method.\nIn this method, small groups (known as tournaments) are created from\nrandomly chosen individuals. The individual(s) with the best fitness\nscores are selected to reproduce the next generation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tournament_size</strong> (int):\nSize of each tournament.\nlarger tournaments focus on exploitation,\nwhile small tournaments focus on exploration.</li>\n<li><strong>higher_is_better</strong> (bool, optional):\nis higher fitness better or worse, by default False</li>\n<li><strong>replace</strong> (bool, optional):\nwhether tournaments can contain multiple copies of the same\nindividual, by default False</li>\n<li><strong>events</strong> (List[str], optional):\nselection events, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tournament_size</span>, </span><span class=\"param\"><span class=\"n\">higher_is_better</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection.tournament_size", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection.tournament_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection.replace", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection.replace", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection.select", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection.select", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source_inds</span>, </span><span class=\"param\"><span class=\"n\">dest_inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.individual", "modulename": "eckity.individual", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual", "modulename": "eckity.individual", "qualname": "Individual", "kind": "class", "doc": "<p>A candidate solution to the problem.\nThis class is abstract and should not be instansiated directly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitness</strong> (Fitness):\nThis object manages the fitness state of the individual.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nThe unique id of the individual.</li>\n<li><strong>gen</strong> (int):\nThe generation number of the individual.</li>\n<li><strong>fitness</strong> (Fitness):\nThis object manages the fitness state of the individual.</li>\n<li><strong>cloned_from</strong> (list):\nA list of ids of individuals that this individual was cloned from.</li>\n<li><strong>selected_by</strong> (list):\nA list of selection methods that selected this individual in\nthe last generation.</li>\n<li><strong>applied_operators</strong> (list):\nA list of genetic operators that were applied on this individual\nin the last generation.\n<strong>* Note that failed operators are still included in this list. *</strong></li>\n</ul>\n"}, {"fullname": "eckity.individual.Individual.__init__", "modulename": "eckity.individual", "qualname": "Individual.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fitness</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"o\">.</span><span class=\"n\">Fitness</span>,</span><span class=\"param\">\t<span class=\"n\">update_parents</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.individual.Individual.id", "modulename": "eckity.individual", "qualname": "Individual.id", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "eckity.individual.Individual.gen", "modulename": "eckity.individual", "qualname": "Individual.gen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual.fitness", "modulename": "eckity.individual", "qualname": "Individual.fitness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual.cloned_from", "modulename": "eckity.individual", "qualname": "Individual.cloned_from", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual.selected_by", "modulename": "eckity.individual", "qualname": "Individual.selected_by", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual.applied_operators", "modulename": "eckity.individual", "qualname": "Individual.applied_operators", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual.update_parents", "modulename": "eckity.individual", "qualname": "Individual.update_parents", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual.update_id", "modulename": "eckity.individual", "qualname": "Individual.update_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.set_fitness_not_evaluated", "modulename": "eckity.individual", "qualname": "Individual.set_fitness_not_evaluated", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.clone", "modulename": "eckity.individual", "qualname": "Individual.clone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.get_pure_fitness", "modulename": "eckity.individual", "qualname": "Individual.get_pure_fitness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.get_augmented_fitness", "modulename": "eckity.individual", "qualname": "Individual.get_augmented_fitness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.better_than", "modulename": "eckity.individual", "qualname": "Individual.better_than", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution", "modulename": "eckity.multi_objective_evolution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.crowding_termination_checker", "modulename": "eckity.multi_objective_evolution.crowding_termination_checker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.crowding_termination_checker.CrowdingTerminationChecker", "modulename": "eckity.multi_objective_evolution.crowding_termination_checker", "qualname": "CrowdingTerminationChecker", "kind": "class", "doc": "<p>Concrete Termination Checker that checks the distance from best existing fitness value to target fitness value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threshold</strong> (float, default=0.1):\nwhat is the maximal value of crowding that should be allowed in he population</li>\n</ul>\n", "bases": "eckity.termination_checkers.termination_checker.TerminationChecker"}, {"fullname": "eckity.multi_objective_evolution.crowding_termination_checker.CrowdingTerminationChecker.__init__", "modulename": "eckity.multi_objective_evolution.crowding_termination_checker", "qualname": "CrowdingTerminationChecker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span>)</span>"}, {"fullname": "eckity.multi_objective_evolution.crowding_termination_checker.CrowdingTerminationChecker.threshold", "modulename": "eckity.multi_objective_evolution.crowding_termination_checker", "qualname": "CrowdingTerminationChecker.threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.crowding_termination_checker.CrowdingTerminationChecker.should_terminate", "modulename": "eckity.multi_objective_evolution.crowding_termination_checker", "qualname": "CrowdingTerminationChecker.should_terminate", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe evolutionary experiment population of individuals.</li>\n<li><strong>best_individual</strong> (Individual):\nThe individual that has the best fitness of the current generation.</li>\n<li><strong>gen_number</strong> (int):\nCurrent generation number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the algorithm should terminate early, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">best_individual</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">gen_number</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.moe_best_worst_statistics", "modulename": "eckity.multi_objective_evolution.moe_best_worst_statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.moe_best_worst_statistics.MOEBestWorstStatistics", "modulename": "eckity.multi_objective_evolution.moe_best_worst_statistics", "qualname": "MOEBestWorstStatistics", "kind": "class", "doc": "<p>Concrete Statistics class.\nIntended for Multi Objective Evolution.\nProvides statistics about the best and worst fitness fronts of every sub-population in\nsome generation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n<li><strong>output_stream</strong> (Optional[SupportsWrite[str]], default=stdout):\nOutput file for the statistics.\nBy default, the statistics will be written to stdout.</li>\n</ul>\n", "bases": "eckity.statistics.statistics.Statistics"}, {"fullname": "eckity.multi_objective_evolution.moe_best_worst_statistics.MOEBestWorstStatistics.__init__", "modulename": "eckity.multi_objective_evolution.moe_best_worst_statistics", "qualname": "MOEBestWorstStatistics.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">output_stream</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "eckity.multi_objective_evolution.moe_best_worst_statistics.MOEBestWorstStatistics.output_stream", "modulename": "eckity.multi_objective_evolution.moe_best_worst_statistics", "qualname": "MOEBestWorstStatistics.output_stream", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.moe_best_worst_statistics.MOEBestWorstStatistics.write_statistics", "modulename": "eckity.multi_objective_evolution.moe_best_worst_statistics", "qualname": "MOEBestWorstStatistics.write_statistics", "kind": "function", "doc": "<p>Write the statistics information using the format string field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sender</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.moe_best_worst_statistics.MOEBestWorstStatistics.get_corners", "modulename": "eckity.multi_objective_evolution.moe_best_worst_statistics", "qualname": "MOEBestWorstStatistics.get_corners", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sub_pop</span>, </span><span class=\"param\"><span class=\"n\">rank</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_breeder", "modulename": "eckity.multi_objective_evolution.nsga2_breeder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_breeder.NSGA2Breeder", "modulename": "eckity.multi_objective_evolution.nsga2_breeder", "qualname": "NSGA2Breeder", "kind": "class", "doc": "<p>A Simple version of Breeder class.\nAll simple classes assume there is only one sub-population in population.</p>\n", "bases": "eckity.breeders.simple_breeder.SimpleBreeder"}, {"fullname": "eckity.multi_objective_evolution.nsga2_breeder.NSGA2Breeder.__init__", "modulename": "eckity.multi_objective_evolution.nsga2_breeder", "qualname": "NSGA2Breeder.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.multi_objective_evolution.nsga2_breeder.NSGA2Breeder.selected_individuals", "modulename": "eckity.multi_objective_evolution.nsga2_breeder", "qualname": "NSGA2Breeder.selected_individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_breeder.NSGA2Breeder.apply_breed", "modulename": "eckity.multi_objective_evolution.nsga2_breeder", "qualname": "NSGA2Breeder.apply_breed", "kind": "function", "doc": "<p>Apply elitism, selection method and the sub-population's operator sequence on each sub-population.\nIn simple case, the operator sequence is applied on the one and only sub-population.</p>\n\n<p>adds the current generation to the next generation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population:</strong>: Population of sub-populations of individuals. The operators will be applied on those individuals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.logger", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.multi_objective_evolution.nsga2_evolution (INFO)&gt;"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution", "kind": "class", "doc": "<p>Evolutionary algorithm to be executed.</p>\n\n<p>Abstract Algorithm that can be extended to concrete algorithms,\nsuch as SimpleEvolution, Coevolution etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe population to be evolved.\nConsists of several sub-populations.\nref: <a href=\"https://api.eckity.org/eckity/population.html\">https://api.eckity.org/eckity/population.html</a></li>\n<li><strong>statistics</strong> (Statistics or list of Statistics, default=None):\nProvide statistics on the population during the evolution.\nref: <a href=\"https://api.eckity.org/eckity/statistics.html\">https://api.eckity.org/eckity/statistics.html</a></li>\n<li><strong>breeder</strong> (Breeder, default=SimpleBreeder()):\nResponsible for applying selection and operator sequence on individuals\nin each generation. Applies on one sub-population in simple case.\nref: <a href=\"https://api.eckity.org/eckity/breeders.html\">https://api.eckity.org/eckity/breeders.html</a></li>\n<li><strong>population_evaluator</strong> (PopulationEvaluator,):\ndefault=SimplePopulationEvaluator()\nEvaluates individual fitness scores concurrently and returns the best\nindividual of each subpopulation (one individual in simple case).\nref: <a href=\"https://api.eckity.org/eckity/evaluators.html\">https://api.eckity.org/eckity/evaluators.html</a></li>\n<li><strong>max_generation</strong> (int, default=100):\nMaximal number of generations to run the evolutionary process.\nNote the evolution could end before reaching max_generation,\ndepends on the termination checker.\nNote there are up to <code>max_generation + 1</code> fitness calculations,\nbut only up to <code>max_generation</code> selections</li>\n<li><strong>events</strong> (dict(str, dict(object, function)), default=None):\ndict of events, each event holds a dict (subscriber, callback).</li>\n<li><strong>event_names</strong> (list of strings, default=None):\nNames of events to publish during the evolution.</li>\n<li><strong>termination_checker</strong> (TerminationChecker or a list of TerminationCheckers,):\ndefault=None\nChecks if the algorithm should terminate early.\nref: <a href=\"https://api.eckity.org/eckity/termination_checkers.html\">https://api.eckity.org/eckity/termination_checkers.html</a></li>\n<li><strong>max_workers</strong> (int, default=None):\nMaximal number of worker nodes for the Executor object\nthat evaluates the fitness of the individuals.\nref: <a href=\"https://docs.python.org/3/library/concurrent.futures.html\">https://docs.python.org/3/library/concurrent.futures.html</a></li>\n<li><strong>random_generator</strong> (RNG, default=RNG()):\nRandom Number Generator.</li>\n<li><strong>random_seed</strong> (int, default=current system time):\nRandom seed for deterministic experiment.</li>\n<li><strong>generation_seed</strong> (int, default=None):\nCurrent generation seed.\nUseful for resuming a previously paused experiment.</li>\n<li><strong>generation_num</strong> (int, default=0):\nCurrent generation number</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>final_generation_</strong> (int):\nThe generation in which the evolution ended.</li>\n</ul>\n", "bases": "eckity.algorithms.algorithm.Algorithm"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.__init__", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">population</span>,</span><span class=\"param\">\t<span class=\"n\">statistics</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">breeder</span><span class=\"o\">=&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">breeders</span><span class=\"o\">.</span><span class=\"n\">simple_breeder</span><span class=\"o\">.</span><span class=\"n\">SimpleBreeder</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">population_evaluator</span><span class=\"o\">=&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">evaluators</span><span class=\"o\">.</span><span class=\"n\">simple_population_evaluator</span><span class=\"o\">.</span><span class=\"n\">SimplePopulationEvaluator</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">NSGA2FrontSorting</span><span class=\"o\">=&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">multi_objective_evolution</span><span class=\"o\">.</span><span class=\"n\">nsga2_front_sorting</span><span class=\"o\">.</span><span class=\"n\">NSGA2FrontSorting</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">max_generation</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">termination_checker</span><span class=\"o\">=&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">termination_checkers</span><span class=\"o\">.</span><span class=\"n\">threshold_from_target_termination_checker</span><span class=\"o\">.</span><span class=\"n\">ThresholdFromTargetTerminationChecker</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"s1\">&#39;thread&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_generator</span><span class=\"o\">=&lt;</span><span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">RNG</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">generation_seed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">best_of_run_</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">best_of_run_evaluator</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">best_of_gen</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worst_of_gen</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">generation_num</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.termination_checker", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.termination_checker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.best_of_run_", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.best_of_run_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.best_of_run_evaluator", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.best_of_run_evaluator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.best_of_gen", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.best_of_gen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.worst_of_gen", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.worst_of_gen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.max_generation", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.max_generation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.final_generation_", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.final_generation_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.NSGA2FrontSorting", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.NSGA2FrontSorting", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.generation_iteration", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.generation_iteration", "kind": "function", "doc": "<p>Performs one iteration of the evolutionary run, for the current generation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gen:</strong>: current generation number (for example, generation #100)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gen</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.initialize", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.initialize", "kind": "function", "doc": "<p>Initialize the evolutionary algorithm</p>\n\n<p>Register statistics to <code>after_generation</code> event</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.execute", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.execute", "kind": "function", "doc": "<p>Compute output using best evolved individual.\nUse <code>execute</code> in a non-sklearn setting.\nInput keyword arguments that set variable values.\nFor example if <code>terminal_set=['x', 'y', 1, -1]</code> then call <code>execute(x=..., y=...)</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (keyword arguments):\nThe input to the program (tree).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Output as computed by the best individual of the evolutionary run.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.finish", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.finish", "kind": "function", "doc": "<p>Finish the evolutionary run by showing the best individual and printing the best fitness</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_evolution.NSGA2Evolution.event_name_to_data", "modulename": "eckity.multi_objective_evolution.nsga2_evolution", "qualname": "NSGA2Evolution.event_name_to_data", "kind": "function", "doc": "<p>Convert event name to relevant data of the Algorithm for the event</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>event_name</strong> (string):\nname of the event that is happening</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, object]</strong>: Algorithm data regarding the given event</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness", "kind": "class", "doc": "<p>This class is responsible for handling the fitness score of some Individual\n(checking if fitness is evaluated, comparing fitness scores with other individuals etc.)</p>\n\n<p>is_evaluated: bool\n    declares if fitness score is evaluated and updated in the current generation</p>\n\n<p>higher_is_better: bool\n    declares the fitness direction.\n    i.e., if it should be minimized or maximized</p>\n\n<p>cache: bool\n    declares whether the fitness score should reset at the end of each generation</p>\n\n<p>is_relative_fitness: bool\n    declares whether the fitness score is absolute or relative</p>\n", "bases": "eckity.fitness.fitness.Fitness"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.__init__", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fitness</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">higher_is_better</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_relative_fitness</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.fitness", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.fitness", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.crowding", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.crowding", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.front_rank", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.front_rank", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.set_fitness", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.set_fitness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.get_pure_fitness", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.get_pure_fitness", "kind": "function", "doc": "<p>Returns the pure fitness score of the individual (before applying balancing methods like bloat control)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.set_not_evaluated", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.set_not_evaluated", "kind": "function", "doc": "<p>Set this fitness score status to be not evaluated</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.check_comparable_fitnesses", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.check_comparable_fitnesses", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other_fitness</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"o\">.</span><span class=\"n\">Fitness</span>,</span><span class=\"param\">\t<span class=\"n\">ind</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">individual</span><span class=\"o\">.</span><span class=\"n\">Individual</span>,</span><span class=\"param\">\t<span class=\"n\">other_ind</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">individual</span><span class=\"o\">.</span><span class=\"n\">Individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.better_than", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.better_than", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>ind</strong> (Individual):</p></li>\n<li><p><strong>other_fitness</strong> (NSGA2Fitness):</p></li>\n<li><p><strong>other_ind</strong> (Individual):</p></li>\n<li><p><strong>Returns</strong> (True ind has lower rank or equal rank and bigger crwoding value):</p></li>\n<li><p><strong>-------</strong></p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span>, </span><span class=\"param\"><span class=\"n\">other_ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.equal_to", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.equal_to", "kind": "function", "doc": "<p>Compares between the current fitness of the individual <code>ind</code> to the fitness score <code>other_fitness</code> of <code>other_ind</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ind</strong> (Individual):\nthe individual instance that holds this Fitness instance</li>\n<li><strong>other_fitness</strong> (Fitness):\nthe Fitness instance of the <code>other</code> individual</li>\n<li><strong>other_ind</strong> (Individual):\nthe <code>other</code> individual instance which is being compared to the individual <code>ind</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this fitness is equal to the <code>other</code> fitness, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span>, </span><span class=\"param\"><span class=\"n\">other_ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_fitness.NSGA2Fitness.dominate", "modulename": "eckity.multi_objective_evolution.nsga2_fitness", "qualname": "NSGA2Fitness.dominate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">other_fitness</span>, </span><span class=\"param\"><span class=\"n\">other_ind</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_front_sorting", "modulename": "eckity.multi_objective_evolution.nsga2_front_sorting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_front_sorting.NSGA2FrontSorting", "modulename": "eckity.multi_objective_evolution.nsga2_front_sorting", "qualname": "NSGA2FrontSorting", "kind": "class", "doc": "<p>This class is incharge of setitng the value of selecting only the best individuals\nout of the population\n(mening that the are dominated by as littel amount of other Individuals as posible)</p>\n\n<p>this class allso set the values of the \"front_rank\" and \"crowding\" of each individual</p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_front_sorting.NSGA2FrontSorting.select_for_population", "modulename": "eckity.multi_objective_evolution.nsga2_front_sorting", "qualname": "NSGA2FrontSorting.select_for_population", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span><span class=\"p\">:</span> <span class=\"n\">eckity</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span>, </span><span class=\"param\"><span class=\"n\">new_pop_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.multi_objective_evolution.nsga2_front_sorting.DominationCounter", "modulename": "eckity.multi_objective_evolution.nsga2_front_sorting", "qualname": "DominationCounter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_front_sorting.DominationCounter.__init__", "modulename": "eckity.multi_objective_evolution.nsga2_front_sorting", "qualname": "DominationCounter.__init__", "kind": "function", "doc": "<p>self.dominates : a list of all the individuals this individual dominates\nself.domination_counter : a counter of how many other individuals dominates this one</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "eckity.multi_objective_evolution.nsga2_front_sorting.DominationCounter.dominates", "modulename": "eckity.multi_objective_evolution.nsga2_front_sorting", "qualname": "DominationCounter.dominates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_front_sorting.DominationCounter.domination_counter", "modulename": "eckity.multi_objective_evolution.nsga2_front_sorting", "qualname": "DominationCounter.domination_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_plot", "modulename": "eckity.multi_objective_evolution.nsga2_plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_plot.NSGA2Plot", "modulename": "eckity.multi_objective_evolution.nsga2_plot", "qualname": "NSGA2Plot", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_plot.NSGA2Plot.__init__", "modulename": "eckity.multi_objective_evolution.nsga2_plot", "qualname": "NSGA2Plot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">objective1</span><span class=\"o\">=</span><span class=\"s1\">&#39;Objective function 1&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">objective2</span><span class=\"o\">=</span><span class=\"s1\">&#39;Objective function 2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">savefile</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.multi_objective_evolution.nsga2_plot.NSGA2Plot.savefile", "modulename": "eckity.multi_objective_evolution.nsga2_plot", "qualname": "NSGA2Plot.savefile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_plot.NSGA2Plot.objective1", "modulename": "eckity.multi_objective_evolution.nsga2_plot", "qualname": "NSGA2Plot.objective1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_plot.NSGA2Plot.objective2", "modulename": "eckity.multi_objective_evolution.nsga2_plot", "qualname": "NSGA2Plot.objective2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.multi_objective_evolution.nsga2_plot.NSGA2Plot.print_plots", "modulename": "eckity.multi_objective_evolution.nsga2_plot", "qualname": "NSGA2Plot.print_plots", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sender</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.population", "modulename": "eckity.population", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.population.Population", "modulename": "eckity.population", "qualname": "Population", "kind": "class", "doc": "<p>Population of individuals to be evolved in the evolutionary run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sub_populations</strong> (list of Subpopulations):\nsubpopulations contained in the population.\nFor more information, see eckity.subpopulation.</li>\n</ul>\n"}, {"fullname": "eckity.population.Population.__init__", "modulename": "eckity.population", "qualname": "Population.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sub_populations</span></span>)</span>"}, {"fullname": "eckity.population.Population.sub_populations", "modulename": "eckity.population", "qualname": "Population.sub_populations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.population.Population.create_population_individuals", "modulename": "eckity.population", "qualname": "Population.create_population_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.population.Population.find_individual_subpopulation", "modulename": "eckity.population", "qualname": "Population.find_individual_subpopulation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.population.Population.get_best_individuals", "modulename": "eckity.population", "qualname": "Population.get_best_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.population.Population.get_worst_individuals", "modulename": "eckity.population", "qualname": "Population.get_worst_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.population.Population.get_average_fitness", "modulename": "eckity.population", "qualname": "Population.get_average_fitness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.random", "modulename": "eckity.random", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.random.rng", "modulename": "eckity.random.rng", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.random.rng.RNG", "modulename": "eckity.random.rng", "qualname": "RNG", "kind": "class", "doc": "<p>Random number generator.\nNecessary for experiment reproducibility.\nCurrently supports <code>random</code> and <code>numpy</code> modules.\nFor additional modules, extend this class and override <code>set_seed</code>.</p>\n\n<p>Example:\nclass TorchRNG(RNG):\n    @override\n    def set_seed(self, seed: int) -> None:\n        super().set_seed(seed)\n        torch.manual_seed(seed)</p>\n"}, {"fullname": "eckity.random.rng.RNG.set_seed", "modulename": "eckity.random.rng", "qualname": "RNG.set_seed", "kind": "function", "doc": "<p>Set seed for random number generator.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seed</strong> (int):\nSeed for random number generator</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible", "modulename": "eckity.sklearn_compatible", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator", "modulename": "eckity.sklearn_compatible.classification_evaluator", "kind": "module", "doc": "<p>This module implements the fitness evaluation class, which delivers the fitness function.\nYou will need to implement such a class to work with your own problem and fitness function.</p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.CLF_METHODS", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "CLF_METHODS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;sigmoid&#x27;, &#x27;argmax&#x27;, &#x27;softmax&#x27;)"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator", "kind": "class", "doc": "<p>Class to compute the fitness of an individual in classification problems.\nAll simple classes assume only one sub-population.</p>\n", "bases": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.__init__", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">accuracy_score</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">n_classes</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">clf_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;sigmoid&#39;</span></span>)</span>"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.X", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.X", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.y", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.metric", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.n_classes", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.n_classes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.clf_method", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.clf_method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.set_context", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.set_context", "kind": "function", "doc": "<p>Receive X and y values and assign them to X and y fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (tuple. first element is a numpy array of size (n_samples, n_features),):\nand the second element is a numpy array of size (n_samples, 1) or (n_samples,)\nX matrix and y vector, either (X_train, y_train) or (X_test, y_test), depending on the evolution stage</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.evaluate_individual", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.evaluate_individual", "kind": "function", "doc": "<p>Compute the fitness value by comparing the program tree execution result to the result vector y</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Tree):\nAn individual program tree in the GP population, whose fitness needs to be computed.\nMakes use of GPTree.execute, which runs the program.\nCalling <code>GPTree.execute</code> must use keyword arguments that match the terminal-set variables.\nFor example, if the terminal set includes <code>x</code> and <code>y</code> then the call is <code>GPTree.execute(x=..., y=...)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float:</strong>: computed fitness value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.classify_individual", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.classify_individual", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator", "modulename": "eckity.sklearn_compatible.regression_evaluator", "kind": "module", "doc": "<p>This module implements the fitness evaluation class, which delivers the\nfitness function. You will need to implement such a class to work with your\nown problem and fitness function.</p>\n"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator", "kind": "class", "doc": "<p>Computes the fitness of an individual in regression problems.\nAll simple classes assume only one sub-population.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>X</strong> (array-like of shape (n_samples, n_features), default=None):</p></li>\n<li><p><strong>Training/Test data.</strong></p></li>\n<li><p><strong>y</strong> (array-like of shape (n_samples,) or (n_samples, 1), default=None):</p></li>\n<li><p><strong>Target vector. used during the training phase.</strong></p></li>\n<li><p><strong>metric</strong> (callable (optional, default=mean_absolute_error)):</p></li>\n<li><p><strong>A function which receives two array-like of shapes (n_samples,) or (n_samples, 1) and returns a float or</strong></p></li>\n<li><strong>ndarray of floats</strong></li>\n</ul>\n", "bases": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.__init__", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">metric</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">mean_absolute_error</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.X", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.X", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.y", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.metric", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.set_context", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.set_context", "kind": "function", "doc": "<p>Receive X and y values and assign them to X and y fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (tuple. first element is a numpy array of size (n_samples, n_features),):\nand the second element is a numpy array of size (n_samples, 1) or (n_samples,)\nX matrix and y vector, either (X_train, y_train) or (X_test, None), depending on the evolution stage</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>reg_eval = RegressionEvaluator()\nX, y = make_regression()\nX_train, X_test, y_train, y_test = train_test_split()\nreg_eval.set_context(X_train, y_train)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.evaluate_individual", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.evaluate_individual", "kind": "function", "doc": "<p>compute fitness value by computing the MAE between program tree execution result and y result vector</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individual</strong> (Tree):\nAn individual program tree in the GP population, whose fitness needs to be computed.\nMakes use of GPTree.execute, which runs the program.\nIn Sklearn settings, calling <code>individual.execute</code> must use a numpy array.\nFor example, if self.X is X_train/X_test, the call is <code>individual.execute(self.X)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Computed fitness value - evaluated using the provided scoring function between the execution result of X and\nthe vector y.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_classifier", "modulename": "eckity.sklearn_compatible.sk_classifier", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SKClassifier", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SKClassifier", "kind": "class", "doc": "<p>Sklearn-compatible wrapper to support evolution using sklearn methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>algorithm</strong> (Algorithm):\nWrapped Evolutionary algorithm.\nThe Wrapper invokes 'evolve' and 'execute' methods of the algorithm\nduring the fitting and prediction process, respectively.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>is_fitted</strong> (bool):\nDetermines if the model is fitted (evolved).</li>\n</ul>\n", "bases": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper, sklearn.base.ClassifierMixin"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SKClassifier.predict", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SKClassifier.predict", "kind": "function", "doc": "<p>Compute output using best evolved individual.\nUse <code>predict</code> in a sklearn setting.\nInput is a numpy array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (array-like or sparse matrix of (num samples, num feautres)):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>y</strong> (array, shape (num samples,)):\nReturns predicted values after applying classification.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SKClassifier.predict_proba", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SKClassifier.predict_proba", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SKClassifier.predict_log_proba", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SKClassifier.predict_log_proba", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_regressor", "modulename": "eckity.sklearn_compatible.sk_regressor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.sk_regressor.SKRegressor", "modulename": "eckity.sklearn_compatible.sk_regressor", "qualname": "SKRegressor", "kind": "class", "doc": "<p>Sklearn-compatible wrapper to support evolution using sklearn methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>algorithm</strong> (Algorithm):\nWrapped Evolutionary algorithm.\nThe Wrapper invokes 'evolve' and 'execute' methods of the algorithm\nduring the fitting and prediction process, respectively.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>is_fitted</strong> (bool):\nDetermines if the model is fitted (evolved).</li>\n</ul>\n", "bases": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper, sklearn.base.RegressorMixin"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper", "kind": "class", "doc": "<p>Sklearn-compatible wrapper to support evolution using sklearn methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>algorithm</strong> (Algorithm):\nWrapped Evolutionary algorithm.\nThe Wrapper invokes 'evolve' and 'execute' methods of the algorithm\nduring the fitting and prediction process, respectively.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>is_fitted</strong> (bool):\nDetermines if the model is fitted (evolved).</li>\n</ul>\n"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.__init__", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">algorithm</span></span>)</span>"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.algorithm", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.algorithm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.fit", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.fit", "kind": "function", "doc": "<p>Run evolutionary algorithm.\nUse <code>fit</code> in a sklearn setting.\n Parameters</p>\n\n<hr />\n\n<p>X : {array-like, sparse matrix} of shape (n_samples, n_features)\n     The training input samples.\n y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n     The target values (real numbers).\n Returns</p>\n\n<hr />\n\n<p>self : SklearnWrapper\n     Fitted (evolved) model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.predict", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.predict", "kind": "function", "doc": "<p>Compute output using best evolved individual.\nUse <code>predict</code> in a sklearn setting.\nInput is a numpy array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (array-like or sparse matrix of (num samples, num feautres)):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>y</strong> (array, shape (num samples,)):\nReturns predicted values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.get_params", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.get_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.set_params", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.set_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.partial_fit", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.partial_fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.statistics", "modulename": "eckity.statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.best_average_worst_statistics", "modulename": "eckity.statistics.best_average_worst_statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.best_average_worst_statistics.logger", "modulename": "eckity.statistics.best_average_worst_statistics", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.statistics.best_average_worst_statistics (INFO)&gt;"}, {"fullname": "eckity.statistics.best_average_worst_statistics.BestAverageWorstStatistics", "modulename": "eckity.statistics.best_average_worst_statistics", "qualname": "BestAverageWorstStatistics", "kind": "class", "doc": "<p>Concrete Statistics class.\nProvides statistics about the best fitness, average fitness and worst fitness of every sub-population in\nsome generation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n</ul>\n", "bases": "eckity.statistics.statistics.Statistics"}, {"fullname": "eckity.statistics.best_average_worst_statistics.BestAverageWorstStatistics.__init__", "modulename": "eckity.statistics.best_average_worst_statistics", "qualname": "BestAverageWorstStatistics.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.statistics.best_average_worst_statistics.BestAverageWorstStatistics.write_statistics", "modulename": "eckity.statistics.best_average_worst_statistics", "qualname": "BestAverageWorstStatistics.write_statistics", "kind": "function", "doc": "<p>Write the statistics information using the format string field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sender</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics.logger", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.statistics.best_avg_worst_size_tree_statistics (INFO)&gt;"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics.BestAverageWorstSizeTreeStatistics", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "qualname": "BestAverageWorstSizeTreeStatistics", "kind": "class", "doc": "<p>Abstract Statistics class.\nProvides statistics about the current evolution state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n</ul>\n", "bases": "eckity.statistics.statistics.Statistics"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics.BestAverageWorstSizeTreeStatistics.__init__", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "qualname": "BestAverageWorstSizeTreeStatistics.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics.BestAverageWorstSizeTreeStatistics.write_statistics", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "qualname": "BestAverageWorstSizeTreeStatistics.write_statistics", "kind": "function", "doc": "<p>Write the statistics information using the format string field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sender</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.statistics.minimal_print_statistics", "modulename": "eckity.statistics.minimal_print_statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.minimal_print_statistics.logger", "modulename": "eckity.statistics.minimal_print_statistics", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.statistics.minimal_print_statistics (INFO)&gt;"}, {"fullname": "eckity.statistics.minimal_print_statistics.MinimalPrintStatistics", "modulename": "eckity.statistics.minimal_print_statistics", "qualname": "MinimalPrintStatistics", "kind": "class", "doc": "<p>Concrete Statistics class.\nProvides statistics about the best fitness, average fitness and worst fitness of every sub-population in\nsome generation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n</ul>\n", "bases": "eckity.statistics.statistics.Statistics"}, {"fullname": "eckity.statistics.minimal_print_statistics.MinimalPrintStatistics.__init__", "modulename": "eckity.statistics.minimal_print_statistics", "qualname": "MinimalPrintStatistics.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "eckity.statistics.minimal_print_statistics.MinimalPrintStatistics.write_statistics", "modulename": "eckity.statistics.minimal_print_statistics", "qualname": "MinimalPrintStatistics.write_statistics", "kind": "function", "doc": "<p>Write the statistics information using the format string field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sender</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.statistics.statistics", "modulename": "eckity.statistics.statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.statistics.Statistics", "modulename": "eckity.statistics.statistics", "qualname": "Statistics", "kind": "class", "doc": "<p>Abstract Statistics class.\nProvides statistics about the current evolution state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "eckity.statistics.statistics.Statistics.format_string", "modulename": "eckity.statistics.statistics", "qualname": "Statistics.format_string", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.statistics.Statistics.write_statistics", "modulename": "eckity.statistics.statistics", "qualname": "Statistics.write_statistics", "kind": "function", "doc": "<p>Write the statistics information using the format string field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sender</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.subpopulation", "modulename": "eckity.subpopulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.logger", "modulename": "eckity.subpopulation", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger eckity.subpopulation (INFO)&gt;"}, {"fullname": "eckity.subpopulation.Subpopulation", "modulename": "eckity.subpopulation", "qualname": "Subpopulation", "kind": "class", "doc": "<p>Subgroup of the experiment population.</p>\n\n<p>Contains a specific encoding, fitness evaluation method, creator list,\noperator sequence and selection methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>evaluator</strong> (IndividualEvaluator):\nfitness evaluation method for the individuals of this sub-population</li>\n<li><strong>creators</strong> (Creator or list of Creators, default=None):\npossible creators to generate individuals according to the encoding\nof this sub-population (GPTrees, Bit Vectors etc.)</li>\n<li><strong>pcr</strong> (list of integers, default=None):\nprobability mapping for each creator in creators parameter.\nLength must match the length of creators parameter.</li>\n<li><strong>operators_sequence</strong> (list of Crossovers and Mutations, default=None):\nCrossovers and mutations that changes the individuals' representations.\nThe operators are done by their order in the list in each generation.\nSee eckity.genetic_operators for more information.</li>\n<li><strong>selection_methods</strong> (list of SelectionMethods):\nMethods for selecting individuals in each generation.\nSee eckity.genetic_operators for more details on selection methods</li>\n<li><strong>elitism_rate</strong> (float, default=0.0):\nWhat percentage of the sub-population individuals\nshould be kept as-is for the next generation</li>\n<li><strong>population_size</strong> (int, default=200):\nThe number of individuals in this sub-population.</li>\n<li><strong>individuals</strong> (list of Individuals, default=None):\nThe individuals list of this sub-population.</li>\n<li><strong>higher_is_better</strong> (bool, default=False):\nDetermines if the fitness values of this sub-population's\nindividuals should be maximized or minimized.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>n_elite</strong> (int):\nNumber of the sub-population's elite individuals.\nIn every generation, there will be n_elites slots\nfor the elite individuals that will be copied as\nthey are to the next generation.</li>\n</ul>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.__init__", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span>,</span><span class=\"param\">\t<span class=\"n\">creators</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pcr</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">operators_sequence</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">selection_methods</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">elitism_rate</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">population_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">individuals</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">higher_is_better</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.subpopulation.Subpopulation.creators", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.creators", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.population_size", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.population_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.higher_is_better", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.higher_is_better", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.evaluator", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.evaluator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.n_elite", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.n_elite", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.individuals", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.individuals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.create_subpopulation_individuals", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.create_subpopulation_individuals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_operators_sequence", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_operators_sequence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_selection_methods", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_selection_methods", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_best_individual", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_best_individual", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_worst_individual", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_worst_individual", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_average_fitness", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_average_fitness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.contains_individual", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.contains_individual", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">individual</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.termination_checkers", "modulename": "eckity.termination_checkers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "modulename": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.best_fitness_stagnation_termination_checker.BestFitnessStagnationTerminationChecker", "modulename": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "qualname": "BestFitnessStagnationTerminationChecker", "kind": "class", "doc": "<p>Concrete Termination Checker that checks that best firnes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stagnation_generations</strong> (int, default=100.):\nThis termination checker checks if the best fitness hasn't changed for stagnation_generations generations.</li>\n</ul>\n", "bases": "eckity.termination_checkers.termination_checker.TerminationChecker"}, {"fullname": "eckity.termination_checkers.best_fitness_stagnation_termination_checker.BestFitnessStagnationTerminationChecker.__init__", "modulename": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "qualname": "BestFitnessStagnationTerminationChecker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stagnation_generations_to_terminate</span><span class=\"o\">=</span><span class=\"mi\">100</span></span>)</span>"}, {"fullname": "eckity.termination_checkers.best_fitness_stagnation_termination_checker.BestFitnessStagnationTerminationChecker.stagnation_generations_to_terminate", "modulename": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "qualname": "BestFitnessStagnationTerminationChecker.stagnation_generations_to_terminate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.best_fitness_stagnation_termination_checker.BestFitnessStagnationTerminationChecker.best_fitnesses", "modulename": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "qualname": "BestFitnessStagnationTerminationChecker.best_fitnesses", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.best_fitness_stagnation_termination_checker.BestFitnessStagnationTerminationChecker.stagnation_generations", "modulename": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "qualname": "BestFitnessStagnationTerminationChecker.stagnation_generations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.best_fitness_stagnation_termination_checker.BestFitnessStagnationTerminationChecker.should_terminate", "modulename": "eckity.termination_checkers.best_fitness_stagnation_termination_checker", "qualname": "BestFitnessStagnationTerminationChecker.should_terminate", "kind": "function", "doc": "<p>Determines if the best fitness hasn't changed for stagnation_generations generations.\nIf so, recommends the algorithm to terminate early.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe evolutionary experiment population of individuals.</li>\n<li><strong>best_individual</strong> (Individual):\nThe individual that has the best fitness of the algorithm.</li>\n<li><strong>gen_number</strong> (int):\nCurrent generation number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the algorithm should terminate early, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span>, </span><span class=\"param\"><span class=\"n\">best_individual</span>, </span><span class=\"param\"><span class=\"n\">gen_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.termination_checkers.termination_checker", "modulename": "eckity.termination_checkers.termination_checker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.termination_checker.TerminationChecker", "modulename": "eckity.termination_checkers.termination_checker", "qualname": "TerminationChecker", "kind": "class", "doc": "<p>Abstract TerminationChecker class.</p>\n\n<p>This class is responsible of checking if the evolutionary algorithm should perform early termination.\nThis class can be expanded depending on the defined termination condition.\nFor example - threshold from target fitness, small change in fitness over a number of generations etc.</p>\n"}, {"fullname": "eckity.termination_checkers.termination_checker.TerminationChecker.should_terminate", "modulename": "eckity.termination_checkers.termination_checker", "qualname": "TerminationChecker.should_terminate", "kind": "function", "doc": "<p>Determines if the algorithm should perform early termination.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe population of the experiment.</li>\n<li><strong>best_individual</strong> (Individual):\nThe individual that has the best fitness of the algorithm.</li>\n<li><strong>gen_number</strong> (int):\nCurrent generation number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the algorithm should terminate early, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span>, </span><span class=\"param\"><span class=\"n\">best_individual</span>, </span><span class=\"param\"><span class=\"n\">gen_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker", "kind": "class", "doc": "<p>Concrete Termination Checker that checks the distance from best existing fitness value to target fitness value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>optimal</strong> (float, default=0.):\nTarget fitness value.\nThis termination checker checks if the currently best fitness is \"close enough\" to the optimal value.</li>\n<li><strong>threshold</strong> (float, default=0.):\nHow close should the current best fitness be to the target fitness.</li>\n<li><strong>higher_is_better</strong> (bool, default=False):\nDetermines if higher fitness values are better.</li>\n</ul>\n", "bases": "eckity.termination_checkers.termination_checker.TerminationChecker"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker.__init__", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">optimal</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">higher_is_better</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker.optimal", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker.optimal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker.threshold", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker.threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker.higher_is_better", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker.higher_is_better", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker.should_terminate", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker.should_terminate", "kind": "function", "doc": "<p>Determines if the currently best fitness is close enough to the target fitness.\nIf so, recommends the algorithm to terminate early.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe evolutionary experiment population of individuals.</li>\n<li><strong>best_individual</strong> (Individual):\nThe individual that has the best fitness of the algorithm.</li>\n<li><strong>gen_number</strong> (int):\nCurrent generation number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the algorithm should terminate early, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">population</span>, </span><span class=\"param\"><span class=\"n\">best_individual</span>, </span><span class=\"param\"><span class=\"n\">gen_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();