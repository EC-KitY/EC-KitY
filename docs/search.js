window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "eckity", "modulename": "eckity", "type": "module", "doc": "<p>EC-KitY: Evolutionary Computation Tool Kit in Python</p>\n"}, {"fullname": "eckity.algorithms", "modulename": "eckity.algorithms", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm", "modulename": "eckity.algorithms.algorithm", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.algorithms.algorithm.Algorithm", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm", "type": "class", "doc": "<p>Evolutionary algorithm to be executed.</p>\n\n<p>Abstract Algorithm that can be extended to concrete algorithms such as SimpleAlgorithm.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe population to be evolved. Consists of a list of individuals.</li>\n<li><strong>statistics</strong> (Statistics, default=BestAverageWorstStatistics instance):\nStatistics class for providing statistics for every generation.</li>\n<li><strong>breeder</strong> (SimpleBreeder, default=SimpleBreeder()):\nResponsible of applying the selection method and operator sequence on the individuals\nin each generation. Applies on one sub-population in simple case.</li>\n<li><strong>population_evaluator</strong> (SimplePopulationEvaluator, default=SimplePopulationEvaluator()):\nResponsible of evaluating each individual's fitness concurrently and returns the best individual\nof each subpopulation (returns a single individual in simple case).</li>\n<li><strong>max_generation</strong> (int, default=1000):\nMaximal number of generations to run the evolutionary process.\nNote the evolution could end before reaching max_generation, depends on the termination checker.</li>\n<li><strong>events</strong> (dict(str, dict(object, function)), default=None):\nDictionary of events, where each event holds a dictionary of (subscriber, callback method).</li>\n<li><strong>event_names</strong> (list of strings, default=None):\nNames of events to publish during the evolution.</li>\n<li><strong>termination_checker</strong> (TerminationChecker, default=ThresholdFromTargetTerminationChecker()):\nResponsible of checking if the algorithm should finish before reaching max_generation.</li>\n<li><strong>max_workers</strong> (int, default=None):\nMaximal number of worker nodes for the Executor object that evaluates the fitness of the individuals.</li>\n<li><strong>random_generator</strong> (module, default=random):\nRandom generator module.</li>\n<li><strong>random_seed</strong> (float or int, default=current system time):\nRandom seed for deterministic experiment.</li>\n<li><strong>generation_seed</strong> (int, default=None):\nCurrent generation seed. Useful for resuming a previously paused experiment.</li>\n<li><strong>generation_num</strong> (int, default=0):\nCurrent generation number</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>final_generation_</strong> (int):\nThe generation in which the evolution ended.</li>\n</ul>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.__init__", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    population,\n    statistics=None,\n    breeder=None,\n    population_evaluator=None,\n    termination_checker=None,\n    max_generation=None,\n    events=None,\n    event_names=None,\n    random_generator=None,\n    random_seed=1651427223.5120866,\n    generation_seed=None,\n    max_workers=None,\n    generation_num=0\n)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.apply_operator", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, payload)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.evolve", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.evolve", "type": "function", "doc": "<p>Performs the evolutionary run by initializing the random seed, creating the population,\nperforming the evolutionary loop and finally finishing the evolution process</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.execute", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.execute", "type": "function", "doc": "<p></p>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.initialize", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.initialize", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.evolve_main_loop", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.evolve_main_loop", "type": "function", "doc": "<p>Performs the evolutionary main loop</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.generation_iteration", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.generation_iteration", "type": "function", "doc": "<p>Performs an iteration of the evolutionary main loop</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gen</strong>: current generation number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the main loop should terminate, False otherwise</li>\n</ul>\n", "signature": "(self, gen)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.finish", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.finish", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.set_generation_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.set_generation_seed", "type": "function", "doc": "<p></p>\n", "signature": "(self, seed)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.create_population", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.create_population", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.event_name_to_data", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.event_name_to_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.set_random_generator", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.set_random_generator", "type": "function", "doc": "<p></p>\n", "signature": "(self, rng)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.set_random_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.set_random_seed", "type": "function", "doc": "<p></p>\n", "signature": "(self, seed=None)", "funcdef": "def"}, {"fullname": "eckity.algorithms.algorithm.Algorithm.next_seed", "modulename": "eckity.algorithms.algorithm", "qualname": "Algorithm.next_seed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution", "modulename": "eckity.algorithms.simple_evolution", "type": "module", "doc": "<p>This module implements the SimpleEvolution class.</p>\n"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution", "type": "class", "doc": "<p>Simple case evolutionary algorithm.</p>\n\n<p>Basic evolutionary algorithm that contains one sub-population.\nDoes not include and is not meant for multi-objective, co-evolution etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe population to be evolved. Contains only one sub-population in simple case.\nConsists of a list of individuals.</li>\n<li><strong>statistics</strong> (Statistics, default=BestAverageWorstStatistics instance):\nStatistics class for providing statistics during the evolution phase.\nBy default, provides statistics about best, average and worst fitness in every generation.</li>\n<li><strong>breeder</strong> (SimpleBreeder, default=SimpleBreeder instance):\nResponsible of applying the selection method and operator sequence on the individuals\nin each generation. Applies on one sub-population in simple case.</li>\n<li><strong>population_evaluator</strong> (SimplePopulationEvaluator, default=SimplePopulationEvaluator instance):\nResponsible of evaluating each individual's fitness concurrently and returns the best individual\nof each subpopulation (returns a single individual in simple case).</li>\n<li><strong>max_generation</strong> (int, default=1000):\nMaximal number of generations to run the evolutionary process.\nNote the evolution could end before reaching max_generation, depending on the termination checker.</li>\n<li><strong>events</strong> (dict(str, dict(object, function)), default=None):\nDictionary of events, where each event holds a dictionary of (subscriber, callback method).</li>\n<li><strong>event_names</strong> (list of strings, default=None):\nNames of events to publish during the evolution.</li>\n<li><strong>termination_checker</strong> (TerminationChecker, default=ThresholdFromTargetTerminationChecker()):\nResponsible of checking if the algorithm should finish before reaching max_generation.</li>\n<li><strong>max_workers</strong> (int, default=None):\nMaximal number of worker nodes for the Executor object that evaluates the fitness of the individuals.</li>\n<li><strong>random_generator</strong> (module, default=random):\nRandom generator module.</li>\n<li><strong>random_seed</strong> (float or int, default=current system time):\nRandom seed for deterministic experiment.</li>\n<li><strong>generation_seed</strong> (int, default=None):\nCurrent generation seed. Useful for resuming a previously paused experiment.</li>\n<li><strong>best_of_run_</strong> (Individual, default=None):\nThe individual that has the best fitness in the entire evolutionary run.</li>\n<li><strong>best_of_run_evaluator</strong> (IndividualEvaluator, default=None):\nThe evaluator of the best_of_run individual's sub-population.</li>\n<li><strong>best_of_gen</strong> (Individual, default=None):\nThe individual that has the best fitness in the current generation.</li>\n<li><strong>worst_of_gen</strong> (Individual, default=None):\nThe individual that has the worst fitness in the current generation.</li>\n<li><strong>generation_num</strong> (int, default=0):\nCurrent generation number</li>\n</ul>\n", "bases": "eckity.algorithms.algorithm.Algorithm"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.__init__", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    population,\n    statistics=<eckity.statistics.best_average_worst_statistics.BestAverageWorstStatistics object>,\n    breeder=<eckity.breeders.simple_breeder.SimpleBreeder object>,\n    population_evaluator=<eckity.evaluators.simple_population_evaluator.SimplePopulationEvaluator object>,\n    max_generation=500,\n    events=None,\n    event_names=None,\n    termination_checker=<eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker object>,\n    max_workers=None,\n    random_generator=None,\n    random_seed=1651427223.5210862,\n    generation_seed=None,\n    best_of_run_=None,\n    best_of_run_evaluator=None,\n    best_of_gen=None,\n    worst_of_gen=None,\n    generation_num=0\n)", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.initialize", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.initialize", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.generation_iteration", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.generation_iteration", "type": "function", "doc": "<p>Performs one iteration of the evolutionary run, for the current generation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gen:</strong>: current generation number (for example, generation #100)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, gen)", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.execute", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.execute", "type": "function", "doc": "<p>Compute output using best evolved individual.\nUse <code>execute</code> in a non-sklearn setting.\nInput keyword arguments that set variable values.\nFor example if <code>terminal_set=['x', 'y', 1, -1]</code> then call <code>execute(x=..., y=...)</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (keyword arguments):\nThe input to the program (tree).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Output as computed by the best individual of the evolutionary run.</li>\n</ul>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.finish", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.finish", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.get_average_fitness", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.get_average_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.algorithms.simple_evolution.SimpleEvolution.event_name_to_data", "modulename": "eckity.algorithms.simple_evolution", "qualname": "SimpleEvolution.event_name_to_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.base", "modulename": "eckity.base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.base.utils", "modulename": "eckity.base.utils", "type": "module", "doc": "<p>This module implements some utility functions.</p>\n"}, {"fullname": "eckity.base.utils.arity", "modulename": "eckity.base.utils", "qualname": "arity", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (function):\nA function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arity</strong> (int):\nThe function's arity.</li>\n</ul>\n", "signature": "(func)", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher", "modulename": "eckity.before_after_publisher", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher", "type": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.__init__", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, events=None, event_names=None)", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.register", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.register", "type": "function", "doc": "<p></p>\n", "signature": "(self, event, callback=None)", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.unregister", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.unregister", "type": "function", "doc": "<p></p>\n", "signature": "(self, event, customers_id)", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.publish", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.publish", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.event_name_to_data", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.event_name_to_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.before_after_publisher.BeforeAfterPublisher.act_and_publish_before_after", "modulename": "eckity.before_after_publisher", "qualname": "BeforeAfterPublisher.act_and_publish_before_after", "type": "function", "doc": "<p></p>\n", "signature": "(self, act_func: <built-in function callable>)", "funcdef": "def"}, {"fullname": "eckity.breeders", "modulename": "eckity.breeders", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.breeder", "modulename": "eckity.breeders.breeder", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.breeder.Breeder", "modulename": "eckity.breeders.breeder", "qualname": "Breeder", "type": "class", "doc": "<p>The Breeder is responsible to activate the genetic operators (selection, crossover, mutation)\non the existing population</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>events</strong> (dict(str, dict(object, function))):\ndictionary of event names to dictionary of subscribers to callback methods</li>\n</ul>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.breeders.breeder.Breeder.__init__", "modulename": "eckity.breeders.breeder", "qualname": "Breeder.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, events=None)", "funcdef": "def"}, {"fullname": "eckity.breeders.breeder.Breeder.breed", "modulename": "eckity.breeders.breeder", "qualname": "Breeder.breed", "type": "function", "doc": "<p>Breed the given population of the experiment.\nHence, apply genetic operators on the individuals of the population.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>population</strong> (Population):</p></li>\n<li><p><strong>The population of individuals existing in the current experiment.</strong></p></li>\n</ul>\n", "signature": "(self, population)", "funcdef": "def"}, {"fullname": "eckity.breeders.breeder.Breeder.apply_breed", "modulename": "eckity.breeders.breeder", "qualname": "Breeder.apply_breed", "type": "function", "doc": "<p></p>\n", "signature": "(self, population)", "funcdef": "def"}, {"fullname": "eckity.breeders.breeder.Breeder.apply_operator", "modulename": "eckity.breeders.breeder", "qualname": "Breeder.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, payload)", "funcdef": "def"}, {"fullname": "eckity.breeders.simple_breeder", "modulename": "eckity.breeders.simple_breeder", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder", "type": "class", "doc": "<p>The Breeder is responsible to activate the genetic operators (selection, crossover, mutation)\non the existing population</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>events</strong> (dict(str, dict(object, function))):\ndictionary of event names to dictionary of subscribers to callback methods</li>\n</ul>\n", "bases": "eckity.breeders.breeder.Breeder"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.__init__", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, events=None)", "funcdef": "def"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.apply_breed", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.apply_breed", "type": "function", "doc": "<p>Apply elitism, selection method and the sub-population's operator sequence on each sub-population.\nIn simple case, the operator sequence is applied on the one and only sub-population.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population:</strong>: Population of sub-populations of individuals. The operators will be applied on those individuals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, population)", "funcdef": "def"}, {"fullname": "eckity.breeders.simple_breeder.SimpleBreeder.event_name_to_data", "modulename": "eckity.breeders.simple_breeder", "qualname": "SimpleBreeder.event_name_to_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.creators", "modulename": "eckity.creators", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.creator", "modulename": "eckity.creators.creator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.creator.Creator", "modulename": "eckity.creators.creator", "qualname": "Creator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.creators.creator.Creator.__init__", "modulename": "eckity.creators.creator", "qualname": "Creator.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, events=None)", "funcdef": "def"}, {"fullname": "eckity.creators.creator.Creator.create_individuals", "modulename": "eckity.creators.creator", "qualname": "Creator.create_individuals", "type": "function", "doc": "<p></p>\n", "signature": "(self, n_individuals, higher_is_better)", "funcdef": "def"}, {"fullname": "eckity.creators.creator.Creator.apply_operator", "modulename": "eckity.creators.creator", "qualname": "Creator.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, payload)", "funcdef": "def"}, {"fullname": "eckity.creators.creator.Creator.event_name_to_data", "modulename": "eckity.creators.creator", "qualname": "Creator.event_name_to_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators", "modulename": "eckity.creators.gp_creators", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.full", "modulename": "eckity.creators.gp_creators.full", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.full.FullCreator", "modulename": "eckity.creators.gp_creators.full", "qualname": "FullCreator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.creators.gp_creators.tree_creator.GpTreeCreator"}, {"fullname": "eckity.creators.gp_creators.full.FullCreator.__init__", "modulename": "eckity.creators.gp_creators.full", "qualname": "FullCreator.__init__", "type": "function", "doc": "<p>Tree creator using the full method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>init_depth</strong> ((int, int)):</p></li>\n<li><p><strong>Min and max depths of initial random trees. The default is None.</strong></p></li>\n<li><strong>function_set</strong> (list):\nList of functions used as internal nodes in the gp tree. The default is None.</li>\n<li><strong>terminal_set</strong> (list):\nList of terminals used in the gp-tree leaves. The default is None.</li>\n<li><strong>erc_range</strong> ((float, float)):\nRange of values for ephemeral random constant (erc). The default is None.</li>\n<li><strong>bloat_weight</strong> (float):\nBloat control weight to punish large trees. Bigger values make a bigger punish.</li>\n<li><strong>events</strong> (list):\nList of events related to this class</li>\n</ul>\n", "signature": "(\n    self,\n    init_depth=None,\n    function_set=None,\n    terminal_set=None,\n    erc_range=None,\n    bloat_weight=0.1,\n    events=None\n)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.full.FullCreator.create_tree", "modulename": "eckity.creators.gp_creators.full", "qualname": "FullCreator.create_tree", "type": "function", "doc": "<p>Create a random tree using the full method, and assign it to the given individual.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tree_ind</strong> (Tree):\nAn individual of GP Tree representation with an initially empty tree</li>\n<li><strong>max_depth</strong> (int):\nMaximum depth of tree. The default is 5.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, tree_ind, max_depth=5)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.grow", "modulename": "eckity.creators.gp_creators.grow", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.grow.GrowCreator", "modulename": "eckity.creators.gp_creators.grow", "qualname": "GrowCreator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.creators.gp_creators.tree_creator.GpTreeCreator"}, {"fullname": "eckity.creators.gp_creators.grow.GrowCreator.__init__", "modulename": "eckity.creators.gp_creators.grow", "qualname": "GrowCreator.__init__", "type": "function", "doc": "<p>Tree creator using the grow method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>init_depth</strong> ((int, int)):</p></li>\n<li><p><strong>Min and max depths of initial random trees. The default is None.</strong></p></li>\n<li><strong>function_set</strong> (list):\nList of functions used as internal nodes in the gp tree. The default is None.</li>\n<li><strong>terminal_set</strong> (list):\nList of terminals used in the gp-tree leaves. The default is None.</li>\n<li><strong>erc_range</strong> ((float, float)):\nRange of values for ephemeral random constant (erc). The default is None.</li>\n<li><strong>bloat_weight</strong> (float):\nBloat control weight to punish large trees. Bigger values make a bigger punish.</li>\n<li><strong>events</strong> (list):\nList of events related to this class</li>\n</ul>\n", "signature": "(\n    self,\n    init_depth=None,\n    function_set=None,\n    terminal_set=None,\n    erc_range=None,\n    bloat_weight=0.1,\n    events=None\n)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.grow.GrowCreator.create_tree", "modulename": "eckity.creators.gp_creators.grow", "qualname": "GrowCreator.create_tree", "type": "function", "doc": "<p>Create a random tree using the grow method, and assign it to the given individual.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tree_ind</strong> (Tree):\nAn individual of GP Tree representation with an initially empty tree</li>\n<li><strong>max_depth</strong> (int):\nMaximum depth of tree. The default is 5.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, tree_ind, max_depth=5)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.ramped_hh", "modulename": "eckity.creators.gp_creators.ramped_hh", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.ramped_hh.RampedHalfAndHalfCreator", "modulename": "eckity.creators.gp_creators.ramped_hh", "qualname": "RampedHalfAndHalfCreator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.creators.gp_creators.tree_creator.GpTreeCreator"}, {"fullname": "eckity.creators.gp_creators.ramped_hh.RampedHalfAndHalfCreator.__init__", "modulename": "eckity.creators.gp_creators.ramped_hh", "qualname": "RampedHalfAndHalfCreator.__init__", "type": "function", "doc": "<p>Tree creator that creates trees using the Ramped Half and Half method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grow_creator</strong> (GrowCreator):\na tree creator that creates trees using the grow method</li>\n<li><strong>full_creator</strong> (FullCreator):\na tree creator that creates trees using the grow method</li>\n<li><p><strong>init_depth</strong> ((int, int)):</p></li>\n<li><p><strong>Min and max depths of initial random trees. The default is None.</strong></p></li>\n<li><strong>function_set</strong> (list):\nList of functions used as internal nodes in the gp tree. The default is None.</li>\n<li><strong>terminal_set</strong> (list):\nList of terminals used in the gp-tree leaves. The default is None.</li>\n<li><strong>erc_range</strong> ((float, float)):\nRange of values for ephemeral random constant (erc). The default is None.</li>\n<li><strong>bloat_weight</strong> (float):\nBloat control weight to punish large trees. Bigger values make a bigger punish.</li>\n<li><strong>events</strong> (list):\nList of events related to this class</li>\n</ul>\n", "signature": "(\n    self,\n    grow_creator=None,\n    full_creator=None,\n    init_depth=None,\n    function_set=None,\n    terminal_set=None,\n    erc_range=None,\n    bloat_weight=0.1,\n    events=None\n)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.ramped_hh.RampedHalfAndHalfCreator.create_individuals", "modulename": "eckity.creators.gp_creators.ramped_hh", "qualname": "RampedHalfAndHalfCreator.create_individuals", "type": "function", "doc": "<p>Initialize the subpopulation individuals using ramped half-and-half method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_individuals</strong> (int):\nnumber of individuals to create</li>\n<li><strong>higher_is_better</strong> (bool):\ndetermines if the fitness of the created individuals should be minimized or maximized</li>\n<li><strong>Returns</strong></li>\n<li><strong>-------</strong></li>\n</ul>\n", "signature": "(self, n_individuals, higher_is_better)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.ramped_hh.RampedHalfAndHalfCreator.create_tree", "modulename": "eckity.creators.gp_creators.ramped_hh", "qualname": "RampedHalfAndHalfCreator.create_tree", "type": "function", "doc": "<p></p>\n", "signature": "(self, tree_ind, max_depth)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tree_creator", "modulename": "eckity.creators.gp_creators.tree_creator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GpTreeCreator", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GpTreeCreator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.creators.creator.Creator"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GpTreeCreator.__init__", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GpTreeCreator.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    init_depth=None,\n    function_set=None,\n    terminal_set=None,\n    erc_range=None,\n    bloat_weight=0.1,\n    events=None\n)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GpTreeCreator.create_individuals", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GpTreeCreator.create_individuals", "type": "function", "doc": "<p></p>\n", "signature": "(self, n_individuals, higher_is_better)", "funcdef": "def"}, {"fullname": "eckity.creators.gp_creators.tree_creator.GpTreeCreator.create_tree", "modulename": "eckity.creators.gp_creators.tree_creator", "qualname": "GpTreeCreator.create_tree", "type": "function", "doc": "<p></p>\n", "signature": "(self, tree_ind, max_depth)", "funcdef": "def"}, {"fullname": "eckity.evaluators", "modulename": "eckity.evaluators", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.individual_evaluator", "modulename": "eckity.evaluators.individual_evaluator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.individual_evaluator.IndividualEvaluator", "modulename": "eckity.evaluators.individual_evaluator", "qualname": "IndividualEvaluator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.evaluators.individual_evaluator.IndividualEvaluator.evaluate", "modulename": "eckity.evaluators.individual_evaluator", "qualname": "IndividualEvaluator.evaluate", "type": "function", "doc": "<p>Updates the fitness score of the given individuals, then returns the best individual</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals:</strong>: a list of individuals</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>individual</strong>: the individual with the best fitness out of the given individuals</li>\n</ul>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.evaluators.individual_evaluator.IndividualEvaluator.apply_operator", "modulename": "eckity.evaluators.individual_evaluator", "qualname": "IndividualEvaluator.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, payload)", "funcdef": "def"}, {"fullname": "eckity.evaluators.population_evaluator", "modulename": "eckity.evaluators.population_evaluator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator.__init__", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator.apply_operator", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, payload)", "funcdef": "def"}, {"fullname": "eckity.evaluators.population_evaluator.PopulationEvaluator.set_executor", "modulename": "eckity.evaluators.population_evaluator", "qualname": "PopulationEvaluator.set_executor", "type": "function", "doc": "<p></p>\n", "signature": "(self, executor: concurrent.futures.thread.ThreadPoolExecutor)", "funcdef": "def"}, {"fullname": "eckity.evaluators.simple_individual_evaluator", "modulename": "eckity.evaluators.simple_individual_evaluator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator", "modulename": "eckity.evaluators.simple_individual_evaluator", "qualname": "SimpleIndividualEvaluator", "type": "class", "doc": "<p>Computes fitness value for the given individuals.\nIn simple case, evaluates each individual separately.\nYou will need to extend this class with your user-defined fitness evaluation methods.</p>\n", "bases": "eckity.evaluators.individual_evaluator.IndividualEvaluator"}, {"fullname": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator.evaluate", "modulename": "eckity.evaluators.simple_individual_evaluator", "qualname": "SimpleIndividualEvaluator.evaluate", "type": "function", "doc": "<p>Updates the fitness score of the given individuals, then returns the best individual</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong> (list of individuals):\nindividuals to evaluate fitness of  - in Simple Evaluator version the list is of size 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Individual</strong>: the individual with the best fitness out of the given individuals</li>\n</ul>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.evaluators.simple_population_evaluator", "modulename": "eckity.evaluators.simple_population_evaluator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.evaluators.simple_population_evaluator.SimplePopulationEvaluator", "modulename": "eckity.evaluators.simple_population_evaluator", "qualname": "SimplePopulationEvaluator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.evaluators.population_evaluator.PopulationEvaluator"}, {"fullname": "eckity.event_based_operator", "modulename": "eckity.event_based_operator", "type": "module", "doc": "<p>This module implements the Operator class</p>\n"}, {"fullname": "eckity.event_based_operator.Operator", "modulename": "eckity.event_based_operator", "qualname": "Operator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.before_after_publisher.BeforeAfterPublisher"}, {"fullname": "eckity.event_based_operator.Operator.__init__", "modulename": "eckity.event_based_operator", "qualname": "Operator.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, arity=1, events=None, event_names=None)", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.apply_operator", "modulename": "eckity.event_based_operator", "qualname": "Operator.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, payload)", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.initialize", "modulename": "eckity.event_based_operator", "qualname": "Operator.initialize", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.act", "modulename": "eckity.event_based_operator", "qualname": "Operator.act", "type": "function", "doc": "<p>Applies the subclass-specific operator on the given payload,\nand publishing events before and after the operator execution</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>payload:</strong>: operands to apply the operator on</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>the return value of the operator implemented in the sub-class</strong></li>\n</ul>\n", "signature": "(self, payload=None)", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.get_operator_arity", "modulename": "eckity.event_based_operator", "qualname": "Operator.get_operator_arity", "type": "function", "doc": "<p>Getter method for the number of operands this operator is applied on\nFor example, a crossover that exchanges subtrees of 2 individuals will have an arity of 2</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: number of operands this operator is applied on</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.event_based_operator.Operator.event_name_to_data", "modulename": "eckity.event_based_operator", "qualname": "Operator.event_name_to_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.fitness", "modulename": "eckity.fitness", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.fitness", "modulename": "eckity.fitness.fitness", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.fitness.Fitness", "modulename": "eckity.fitness.fitness", "qualname": "Fitness", "type": "class", "doc": "<p>context : list of Individuals\n    individuals involved in calculating the fitness (co-evolution)</p>\n\n<p>trials : list of floats\n    fitness results for previous trials done to calculate fitness (co-evolution)</p>\n"}, {"fullname": "eckity.fitness.fitness.Fitness.__init__", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    context=None,\n    trials=None,\n    is_evaluated=False,\n    is_relative_fitness=False,\n    should_cache_between_gens=False,\n    higher_is_better=False\n)", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.get_pure_fitness", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.get_pure_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.get_augmented_fitness", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.get_augmented_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self, individual)", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.better_than", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.better_than", "type": "function", "doc": "<p></p>\n", "signature": "(self, ind, other_fitness, other_ind)", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.equal_to", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.equal_to", "type": "function", "doc": "<p></p>\n", "signature": "(self, ind, other_fitness, other_ind)", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.set_not_evaluated", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.set_not_evaluated", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.fitness.fitness.Fitness.is_fitness_evaluated", "modulename": "eckity.fitness.fitness", "qualname": "Fitness.is_fitness_evaluated", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.fitness.gp_fitness", "modulename": "eckity.fitness.gp_fitness", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.gp_fitness.GpFitness", "modulename": "eckity.fitness.gp_fitness", "qualname": "GpFitness", "type": "class", "doc": "<p>context : list of Individuals\n    individuals involved in calculating the fitness (co-evolution)</p>\n\n<p>trials : list of floats\n    fitness results for previous trials done to calculate fitness (co-evolution)</p>\n", "bases": "eckity.fitness.simple_fitness.SimpleFitness"}, {"fullname": "eckity.fitness.gp_fitness.GpFitness.__init__", "modulename": "eckity.fitness.gp_fitness", "qualname": "GpFitness.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    fitness: float = None,\n    higher_is_better=False,\n    bloat_weight=0.1\n)", "funcdef": "def"}, {"fullname": "eckity.fitness.gp_fitness.GpFitness.get_augmented_fitness", "modulename": "eckity.fitness.gp_fitness", "qualname": "GpFitness.get_augmented_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self, individual)", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness", "modulename": "eckity.fitness.simple_fitness", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness", "type": "class", "doc": "<p>context : list of Individuals\n    individuals involved in calculating the fitness (co-evolution)</p>\n\n<p>trials : list of floats\n    fitness results for previous trials done to calculate fitness (co-evolution)</p>\n", "bases": "eckity.fitness.fitness.Fitness"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.__init__", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, fitness: float = None, higher_is_better=False)", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.set_fitness", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.set_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self, fitness)", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.get_pure_fitness", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.get_pure_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.set_not_evaluated", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.set_not_evaluated", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.check_comparable_fitnesses", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.check_comparable_fitnesses", "type": "function", "doc": "<p></p>\n", "signature": "(self, other_fitness)", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.better_than", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.better_than", "type": "function", "doc": "<p></p>\n", "signature": "(self, ind, other_fitness, other_ind)", "funcdef": "def"}, {"fullname": "eckity.fitness.simple_fitness.SimpleFitness.equal_to", "modulename": "eckity.fitness.simple_fitness", "qualname": "SimpleFitness.equal_to", "type": "function", "doc": "<p></p>\n", "signature": "(self, ind, other_fitness, other_ind)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings", "modulename": "eckity.genetic_encodings", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp", "modulename": "eckity.genetic_encodings.gp", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree", "modulename": "eckity.genetic_encodings.gp.tree", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions", "modulename": "eckity.genetic_encodings.gp.tree.functions", "type": "module", "doc": "<p>This module implements functions used in the function (internal) nodes of a gp tree.\nNote: all functions work on numpy arrays.</p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_add", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_add", "type": "function", "doc": "<p>x+y</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_sub", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_sub", "type": "function", "doc": "<p>x-y</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_mul", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_mul", "type": "function", "doc": "<p>x*y</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_div", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_div", "type": "function", "doc": "<p>protected division: if abs(y) &gt; 0.001 return x/y else return 0</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_sqrt", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_sqrt", "type": "function", "doc": "<p>protected square root: sqrt(abs(x))</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_log", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_log", "type": "function", "doc": "<p>protected log: if abs(x) &gt; 0.001 return log(abs(x)) else return 0</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_abs", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_abs", "type": "function", "doc": "<p>absolute value of x</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_neg", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_neg", "type": "function", "doc": "<p>negative of x</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_inv", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_inv", "type": "function", "doc": "<p>protected inverse: if abs(x) &gt; 0.001 return 1/x else return 0</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_max", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_max", "type": "function", "doc": "<p>maximum(x,y)</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_min", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_min", "type": "function", "doc": "<p>minimum(x,y)</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_sin", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_sin", "type": "function", "doc": "<p>sin(x)</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_cos", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_cos", "type": "function", "doc": "<p>cos(x)</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_tan", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_tan", "type": "function", "doc": "<p>tan(x)</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_iflte0", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_iflte0", "type": "function", "doc": "<p>if x &lt;= 0 return y else return z</p>\n", "signature": "(x, y, z)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_ifgt0", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_ifgt0", "type": "function", "doc": "<p>if x &gt; 0 return y else return z</p>\n", "signature": "(x, y, z)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_iflte", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_iflte", "type": "function", "doc": "<p>if x &lt;= y return z else return w</p>\n", "signature": "(x, y, z, w)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_ifgt", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_ifgt", "type": "function", "doc": "<p>if x &gt; y return z else return w</p>\n", "signature": "(x, y, z, w)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_and", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_and", "type": "function", "doc": "<p>x and y</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_or", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_or", "type": "function", "doc": "<p>x or y</p>\n", "signature": "(x, y)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_not", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_not", "type": "function", "doc": "<p>not x</p>\n", "signature": "(x)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.functions.f_if_then_else", "modulename": "eckity.genetic_encodings.gp.tree.functions", "qualname": "f_if_then_else", "type": "function", "doc": "<p>if test return dit else return dif</p>\n", "signature": "(test, dit, dif)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "type": "module", "doc": "<p>This module implements the tree class.</p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree", "type": "class", "doc": "<p>A tree optimized for genetic programming operations.\nIt is represented by a list of nodes in depth-first order.\nThere are two types of nodes: functions and terminals.</p>\n\n<p>(tree is not meant as a stand-alone -- parameters are supplied through the call from the Tree Creators)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>init_depth</strong> ((int, int)):\nMin and max depths of initial random trees. The default is None.</li>\n<li><strong>function_set</strong> (list):\nList of functions used as internal nodes in the gp tree. The default is None.</li>\n<li><strong>terminal_set</strong> (list):\nList of terminals used in the gp-tree leaves. The default is None.</li>\n<li><strong>erc_range</strong> ((float, float)):\nRange of values for ephemeral random constant (erc). The default is None.</li>\n</ul>\n", "bases": "eckity.individual.Individual"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.__init__", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    fitness,\n    function_set=None,\n    terminal_set=None,\n    erc_range=None,\n    init_depth=(1, 2)\n)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.size", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.size", "type": "function", "doc": "<p>Compute size of tree.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: tree size (= number of nodes).</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.add_tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.add_tree", "type": "function", "doc": "<p></p>\n", "signature": "(self, node)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.empty_tree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.empty_tree", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.depth", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.depth", "type": "function", "doc": "<p>Compute depth of tree (maximal path length to a leaf).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: tree depth.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.random_function", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.random_function", "type": "function", "doc": "<p>select a random function</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.random_terminal", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.random_terminal", "type": "function", "doc": "<p>select a random terminal or create an erc terminal</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.execute", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.execute", "type": "function", "doc": "<p>Execute the program (tree). \nInput is a numpy array or keyword arguments (but not both).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong> (arguments):\nA numpy array.</li>\n<li><strong>kwargs</strong> (keyword arguments):\nInput to program, including every variable in the terminal set as a keyword argument.\nFor example, if <code>terminal_set=['x', 'y', 'z', 0, 1, -1]</code> \nthen call <code>execute(x=..., y=..., z=...)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: Result of tree execution.</li>\n</ul>\n", "signature": "(self, *args, **kwargs)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.random_subtree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.random_subtree", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.replace_subtree", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.replace_subtree", "type": "function", "doc": "<p>Replace the subtree starting at <code>index</code> with <code>subtree</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtree - new subtree to replace the some existing subtree in this individual's tree</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "(self, subtree)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.tree_individual.Tree.show", "modulename": "eckity.genetic_encodings.gp.tree.tree_individual", "qualname": "Tree.show", "type": "function", "doc": "<p>Print out a simple textual representation of the tree.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.genetic_encodings.gp.tree.utils", "modulename": "eckity.genetic_encodings.gp.tree.utils", "type": "module", "doc": "<p>This module implements some utility functions.</p>\n"}, {"fullname": "eckity.genetic_encodings.gp.tree.utils.create_terminal_set", "modulename": "eckity.genetic_encodings.gp.tree.utils", "qualname": "create_terminal_set", "type": "function", "doc": "<p>Create a terminal set from a 2D-shaped numpy array. </p>\n\n<p>Example: </p>\n\n<pre><code>X = array([[  4,   7,  -7, -10],  \n\n           [  7,  -3,   3,  -8],  \n\n           [  8,  -5,  -3,  -1]])\n</code></pre>\n\n<p>Returns the list: </p>\n\n<pre><code>['x0', 'x1', 'x2', 'x3']\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (2d numpy array):\nThe array from which we wish to extract features -- which will become terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Terminal set (a list).</strong></li>\n</ul>\n", "signature": "(X)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators", "modulename": "eckity.genetic_operators", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers", "modulename": "eckity.genetic_operators.crossovers", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover", "type": "class", "doc": "<p></p>\n", "bases": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover.__init__", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, probability=1, arity=2, events=None)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.crossovers.subtree_crossover.SubtreeCrossover.apply", "modulename": "eckity.genetic_operators.crossovers.subtree_crossover", "qualname": "SubtreeCrossover.apply", "type": "function", "doc": "<p>Perform subtree crossover between this tree and <code>other</code> tree:\n    1. Select random node from <code>other</code> tree\n    2. Get subtree rooted at selected node\n    1. Select a random node in this tree\n    2. Place <code>other</code> selected subtree at this node, replacing current subtree</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>individuals</strong></li>\n<li><p><strong>select_func</strong> (callable):</p></li>\n<li><p><strong>Selection method used to receive additional individuals to perform crossover on</strong></p></li>\n<li><p><strong>individual</strong> (Tree):</p></li>\n<li><p><strong>tree individual to perform crossover on</strong></p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>a new, modified individual</strong></li>\n</ul>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations", "modulename": "eckity.genetic_operators.mutations", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ErcMutation", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ErcMutation", "type": "class", "doc": "<p></p>\n", "bases": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ErcMutation.__init__", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ErcMutation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, probability=1, arity=1, events=None)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.erc_mutation.ErcMutation.apply", "modulename": "eckity.genetic_operators.mutations.erc_mutation", "qualname": "ErcMutation.apply", "type": "function", "doc": "<p>Perform ephemeral random constant (erc) mutation: select an erc node at random\nand add Gaussian noise to it.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation.IdentityTransformation", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "qualname": "IdentityTransformation", "type": "class", "doc": "<p></p>\n", "bases": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation.IdentityTransformation.__init__", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "qualname": "IdentityTransformation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, probability=1, events=None)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.identity_transformation.IdentityTransformation.apply", "modulename": "eckity.genetic_operators.mutations.identity_transformation", "qualname": "IdentityTransformation.apply", "type": "function", "doc": "<p></p>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation", "type": "class", "doc": "<p></p>\n", "bases": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation.__init__", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, probability=1, arity=1, init_depth=None, events=None)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.mutations.subtree_mutation.SubtreeMutation.apply", "modulename": "eckity.genetic_operators.mutations.subtree_mutation", "qualname": "SubtreeMutation.apply", "type": "function", "doc": "<p>Perform subtree mutation: select a subtree at random to be replaced by a new, randomly generated subtree.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.probabilistic_condition_operator", "modulename": "eckity.genetic_operators.probabilistic_condition_operator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator", "modulename": "eckity.genetic_operators.probabilistic_condition_operator", "qualname": "ProbabilisticConditionOperator", "type": "class", "doc": "<p></p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator.__init__", "modulename": "eckity.genetic_operators.probabilistic_condition_operator", "qualname": "ProbabilisticConditionOperator.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, probability=0.05, arity=0, events=None)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator.apply_operator", "modulename": "eckity.genetic_operators.probabilistic_condition_operator", "qualname": "ProbabilisticConditionOperator.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.probabilistic_condition_operator.ProbabilisticConditionOperator.apply", "modulename": "eckity.genetic_operators.probabilistic_condition_operator", "qualname": "ProbabilisticConditionOperator.apply", "type": "function", "doc": "<p></p>\n", "signature": "(self, individuals)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections", "modulename": "eckity.genetic_operators.selections", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection", "modulename": "eckity.genetic_operators.selections.elitism_selection", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection", "type": "class", "doc": "<p></p>\n", "bases": "eckity.genetic_operators.selections.selection_method.SelectionMethod"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection.__init__", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, num_elites, higher_is_better=False, events=None)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.elitism_selection.ElitismSelection.select", "modulename": "eckity.genetic_operators.selections.elitism_selection", "qualname": "ElitismSelection.select", "type": "function", "doc": "<p></p>\n", "signature": "(self, source_inds, dest_inds)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.selection_method", "modulename": "eckity.genetic_operators.selections.selection_method", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod", "type": "class", "doc": "<p></p>\n", "bases": "eckity.event_based_operator.Operator"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.__init__", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, events=None, higher_is_better=False)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.apply_operator", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.apply_operator", "type": "function", "doc": "<p></p>\n", "signature": "(self, payload)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.select", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.select", "type": "function", "doc": "<p></p>\n", "signature": "(self, source_inds, dest_inds)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.selection_method.SelectionMethod.event_name_to_data", "modulename": "eckity.genetic_operators.selections.selection_method", "qualname": "SelectionMethod.event_name_to_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, event_name)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection", "modulename": "eckity.genetic_operators.selections.tournament_selection", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection", "type": "class", "doc": "<p></p>\n", "bases": "eckity.genetic_operators.selections.selection_method.SelectionMethod"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection.__init__", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, tournament_size, higher_is_better=False, events=None)", "funcdef": "def"}, {"fullname": "eckity.genetic_operators.selections.tournament_selection.TournamentSelection.select", "modulename": "eckity.genetic_operators.selections.tournament_selection", "qualname": "TournamentSelection.select", "type": "function", "doc": "<p></p>\n", "signature": "(self, source_inds, dest_inds)", "funcdef": "def"}, {"fullname": "eckity.individual", "modulename": "eckity.individual", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual", "modulename": "eckity.individual", "qualname": "Individual", "type": "class", "doc": "<p></p>\n"}, {"fullname": "eckity.individual.Individual.__init__", "modulename": "eckity.individual", "qualname": "Individual.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, fitness: eckity.fitness.fitness.Fitness)", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.set_fitness_not_evaluated", "modulename": "eckity.individual", "qualname": "Individual.set_fitness_not_evaluated", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.clone", "modulename": "eckity.individual", "qualname": "Individual.clone", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.get_pure_fitness", "modulename": "eckity.individual", "qualname": "Individual.get_pure_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.get_augmented_fitness", "modulename": "eckity.individual", "qualname": "Individual.get_augmented_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.individual.Individual.better_than", "modulename": "eckity.individual", "qualname": "Individual.better_than", "type": "function", "doc": "<p></p>\n", "signature": "(self, other)", "funcdef": "def"}, {"fullname": "eckity.population", "modulename": "eckity.population", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.population.Population", "modulename": "eckity.population", "qualname": "Population", "type": "class", "doc": "<p>Population of individuals to be evolved in the evolutionary run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sub_populations</strong> (list of Subpopulations):\nsub-populations contained in the population.\nFor more information, see eckity.subpopulation.</li>\n</ul>\n"}, {"fullname": "eckity.population.Population.__init__", "modulename": "eckity.population", "qualname": "Population.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, sub_populations)", "funcdef": "def"}, {"fullname": "eckity.population.Population.create_population_individuals", "modulename": "eckity.population", "qualname": "Population.create_population_individuals", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.population.Population.find_individual_subpopulation", "modulename": "eckity.population", "qualname": "Population.find_individual_subpopulation", "type": "function", "doc": "<p></p>\n", "signature": "(self, individual)", "funcdef": "def"}, {"fullname": "eckity.population.Population.get_best_individuals", "modulename": "eckity.population", "qualname": "Population.get_best_individuals", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.population.Population.get_worst_individuals", "modulename": "eckity.population", "qualname": "Population.get_worst_individuals", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.population.Population.get_average_fitness", "modulename": "eckity.population", "qualname": "Population.get_average_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible", "modulename": "eckity.sklearn_compatible", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator", "modulename": "eckity.sklearn_compatible.classification_evaluator", "type": "module", "doc": "<p>This module implements the fitness evaluation class, which delivers the fitness function.\nYou will need to implement such a class to work with your own problem and fitness function.</p>\n"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator", "type": "class", "doc": "<p>Class to compute the fitness of an individual in classification problems.</p>\n", "bases": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.__init__", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, X=None, y=None)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.set_context", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.set_context", "type": "function", "doc": "<p>Receive X and y values and assign them to X and y fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (tuple. first element is a numpy array of size (n_samples, n_features),):\nand the second element is a numpy array of size (n_samples, 1) or (n_samples,)\nX matrix and y vector, either (X_train, y_train) or (X_test, y_test), depending on the evolution stage</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, context)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.classification_evaluator.ClassificationEvaluator.classify_individual", "modulename": "eckity.sklearn_compatible.classification_evaluator", "qualname": "ClassificationEvaluator.classify_individual", "type": "function", "doc": "<p></p>\n", "signature": "(self, individual)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator", "modulename": "eckity.sklearn_compatible.regression_evaluator", "type": "module", "doc": "<p>This module implements the fitness evaluation class, which delivers the fitness function.\nYou will need to implement such a class to work with your own problem and fitness function.</p>\n"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator", "type": "class", "doc": "<p>Computes the fitness of an individual in regression problems.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>X</strong> (array-like of shape (n_samples, n_features), default=None):</p></li>\n<li><p><strong>Training/Test data.</strong></p></li>\n<li><p><strong>y</strong> (array-like of shape (n_samples,) or (n_samples, 1), default=None):</p></li>\n<li><p><strong>Target vector. used during the training phase.</strong></p></li>\n</ul>\n", "bases": "eckity.evaluators.simple_individual_evaluator.SimpleIndividualEvaluator"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.__init__", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, X=None, y=None)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.regression_evaluator.RegressionEvaluator.set_context", "modulename": "eckity.sklearn_compatible.regression_evaluator", "qualname": "RegressionEvaluator.set_context", "type": "function", "doc": "<p>Receive X and y values and assign them to X and y fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (tuple. first element is a numpy array of size (n_samples, n_features),):\nand the second element is a numpy array of size (n_samples, 1) or (n_samples,)\nX matrix and y vector, either (X_train, y_train) or (X_test, None), depending on the evolution stage</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>reg_eval = RegressionEvaluator()\nX, y = make_regression()\nX_train, X_test, y_train, y_test = train_test_split()\nreg_eval.set_context(X_train, y_train)</p>\n", "signature": "(self, context)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_classifier", "modulename": "eckity.sklearn_compatible.sk_classifier", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SkClassifier", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SkClassifier", "type": "class", "doc": "<p>Sklearn-compatible wrapper to support evolution using sklearn methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>algorithm</strong> (Algorithm):\nWrapped Evolutionary algorithm.\nThe Wrapper invokes 'evolve' and 'execute' methods of the algorithm\nduring the fitting and prediction process, respectively.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>is_fitted</strong> (bool):\nDetermines if the model is fitted (evolved).</li>\n</ul>\n", "bases": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper, sklearn.base.ClassifierMixin"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SkClassifier.predict", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SkClassifier.predict", "type": "function", "doc": "<p>Compute output using best evolved individual.\nUse <code>predict</code> in a sklearn setting.\nInput is a numpy array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (array-like or sparse matrix of (num samples, num feautres)):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>y</strong> (array, shape (num samples,)):\nReturns predicted values after applying classification.</li>\n</ul>\n", "signature": "(self, X)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SkClassifier.predict_proba", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SkClassifier.predict_proba", "type": "function", "doc": "<p></p>\n", "signature": "(self, X)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_classifier.SkClassifier.predict_log_proba", "modulename": "eckity.sklearn_compatible.sk_classifier", "qualname": "SkClassifier.predict_log_proba", "type": "function", "doc": "<p></p>\n", "signature": "(self, X)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sk_regressor", "modulename": "eckity.sklearn_compatible.sk_regressor", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.sk_regressor.SkRegressor", "modulename": "eckity.sklearn_compatible.sk_regressor", "qualname": "SkRegressor", "type": "class", "doc": "<p>Sklearn-compatible wrapper to support evolution using sklearn methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>algorithm</strong> (Algorithm):\nWrapped Evolutionary algorithm.\nThe Wrapper invokes 'evolve' and 'execute' methods of the algorithm\nduring the fitting and prediction process, respectively.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>is_fitted</strong> (bool):\nDetermines if the model is fitted (evolved).</li>\n</ul>\n", "bases": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper, sklearn.base.RegressorMixin"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper", "type": "class", "doc": "<p>Sklearn-compatible wrapper to support evolution using sklearn methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>algorithm</strong> (Algorithm):\nWrapped Evolutionary algorithm.\nThe Wrapper invokes 'evolve' and 'execute' methods of the algorithm\nduring the fitting and prediction process, respectively.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>is_fitted</strong> (bool):\nDetermines if the model is fitted (evolved).</li>\n</ul>\n"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.__init__", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, algorithm)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.fit", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.fit", "type": "function", "doc": "<p>Run evolutionary algorithm.\nUse <code>fit</code> in a sklearn setting.\n Parameters</p>\n\n<hr />\n\n<p>X : {array-like, sparse matrix} of shape (n_samples, n_features)\n     The training input samples.\n y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n     The target values (real numbers).\n Returns</p>\n\n<hr />\n\n<p>self : SklearnWrapper\n     Fitted (evolved) model.</p>\n", "signature": "(self, X, y=None)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.predict", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.predict", "type": "function", "doc": "<p>Compute output using best evolved individual.\nUse <code>predict</code> in a sklearn setting.\nInput is a numpy array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (array-like or sparse matrix of (num samples, num feautres)):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>y</strong> (array, shape (num samples,)):\nReturns predicted values.</li>\n</ul>\n", "signature": "(self, X)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.get_params", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.get_params", "type": "function", "doc": "<p></p>\n", "signature": "(self, deep=True)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.set_params", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.set_params", "type": "function", "doc": "<p></p>\n", "signature": "(self, **parameters)", "funcdef": "def"}, {"fullname": "eckity.sklearn_compatible.sklearn_wrapper.SklearnWrapper.partial_fit", "modulename": "eckity.sklearn_compatible.sklearn_wrapper", "qualname": "SklearnWrapper.partial_fit", "type": "function", "doc": "<p></p>\n", "signature": "(self, X, y, classes=None)", "funcdef": "def"}, {"fullname": "eckity.statistics", "modulename": "eckity.statistics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.best_average_worst_statistics", "modulename": "eckity.statistics.best_average_worst_statistics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.best_average_worst_statistics.BestAverageWorstStatistics", "modulename": "eckity.statistics.best_average_worst_statistics", "qualname": "BestAverageWorstStatistics", "type": "class", "doc": "<p>Concrete Statistics class.\nProvides statistics about the best fitness, average fitness and worst fitness of every sub-population in\nsome generation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n<li><strong>output_stream</strong> (Optional[SupportsWrite[str]], default=stdout):\nOutput file for the statistics.\nBy default, the statistics will be written to stdout.</li>\n</ul>\n", "bases": "eckity.statistics.statistics.Statistics"}, {"fullname": "eckity.statistics.best_average_worst_statistics.BestAverageWorstStatistics.__init__", "modulename": "eckity.statistics.best_average_worst_statistics", "qualname": "BestAverageWorstStatistics.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, format_string=None, output_stream=<_io.StringIO object>)", "funcdef": "def"}, {"fullname": "eckity.statistics.best_average_worst_statistics.BestAverageWorstStatistics.write_statistics", "modulename": "eckity.statistics.best_average_worst_statistics", "qualname": "BestAverageWorstStatistics.write_statistics", "type": "function", "doc": "<p>Write the statistics information using the format string field to the output stream field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, sender, data_dict)", "funcdef": "def"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics.BestAverageWorstSizeTreeStatistics", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "qualname": "BestAverageWorstSizeTreeStatistics", "type": "class", "doc": "<p>Abstract Statistics class.\nProvides statistics about the current evolution state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n<li><strong>output_stream</strong> (Optional[SupportsWrite[str]], default=stdout):\nOutput file for the statistics.\nBy default, the statistics will be written to stdout.</li>\n</ul>\n", "bases": "eckity.statistics.statistics.Statistics"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics.BestAverageWorstSizeTreeStatistics.__init__", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "qualname": "BestAverageWorstSizeTreeStatistics.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, format_string=None, output_stream=<_io.StringIO object>)", "funcdef": "def"}, {"fullname": "eckity.statistics.best_avg_worst_size_tree_statistics.BestAverageWorstSizeTreeStatistics.write_statistics", "modulename": "eckity.statistics.best_avg_worst_size_tree_statistics", "qualname": "BestAverageWorstSizeTreeStatistics.write_statistics", "type": "function", "doc": "<p>Write the statistics information using the format string field to the output stream field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, sender, data_dict)", "funcdef": "def"}, {"fullname": "eckity.statistics.statistics", "modulename": "eckity.statistics.statistics", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.statistics.statistics.Statistics", "modulename": "eckity.statistics.statistics", "qualname": "Statistics", "type": "class", "doc": "<p>Abstract Statistics class.\nProvides statistics about the current evolution state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format_string</strong> (str):\nString format of the data to output.\nValue depends on the information the statistics provides.\nFor more information, check out the concrete classes who extend this class.</li>\n<li><strong>output_stream</strong> (Optional[SupportsWrite[str]], default=stdout):\nOutput file for the statistics.\nBy default, the statistics will be written to stdout.</li>\n</ul>\n"}, {"fullname": "eckity.statistics.statistics.Statistics.__init__", "modulename": "eckity.statistics.statistics", "qualname": "Statistics.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, format_string, output_stream=<_io.StringIO object>)", "funcdef": "def"}, {"fullname": "eckity.statistics.statistics.Statistics.write_statistics", "modulename": "eckity.statistics.statistics", "qualname": "Statistics.write_statistics", "type": "function", "doc": "<p>Write the statistics information using the format string field to the output stream field.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong> (object):\nThe object that this statistics provides information about.\nThis class registers to a certain event that the sender object publishes.\nThe statistics are shown as a callback to the event publication.\nFor example, we can register a concrete Statistics sub-class to provide statistics after every generation\nof a concrete Algorithm sub-class.</li>\n<li><strong>data_dict</strong> (dict(str, object)):\nRelevant data to the statistics. Used to gain and provide information from the sender.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, sender, data_dict)", "funcdef": "def"}, {"fullname": "eckity.subpopulation", "modulename": "eckity.subpopulation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.subpopulation.Subpopulation", "modulename": "eckity.subpopulation", "qualname": "Subpopulation", "type": "class", "doc": "<p>Sub-group of the experiment population.</p>\n\n<p>Contains a specific encoding, fitness evaluation method, creator list, operator sequence and selection methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>evaluator</strong> (IndividualEvaluator):\nfitness evaluation method for the individuals of this sub-population</li>\n<li><strong>creators</strong> (Creator or list of Creators, default=None):\npossible creators to generate individuals according to the encoding\nof this sub-population (GPTrees, Bit Vectors etc.)</li>\n<li><strong>pcr</strong> (list of integers, default=None):\nprobability mapping for each creator in creators parameter.\nLength must match the length of creators parameter.</li>\n<li><strong>operators_sequence</strong> (list of Crossovers and Mutations, default=None):\nPossible crossover and mutation actions that can change the individuals' representations.\nThe operators will be done sequentially in each generation, by their order in the list.\nSee eckity.genetic_operators for more details on crossover and mutation operators</li>\n<li><strong>selection_methods</strong> (list of SelectionMethods):\nMethods for selecting individuals in each generation.\nSee eckity.genetic_operators for more details on selection methods</li>\n<li><strong>elitism_rate</strong> (float, default=0.0):\nWhat percentage of the sub-population's individuals should be kept as elites for the next generation</li>\n<li><strong>population_size</strong> (int, default=200):\nThe number of individuals in this sub-population.</li>\n<li><strong>individuals</strong> (list of Individuals, default=None):\nThe individuals list of this sub-population.</li>\n<li><strong>higher_is_better</strong> (bool, default=False):\nDetermines if the fitness value of this sub-population's individuals should be maximized or minimized.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>n_elite</strong> (int):\nNumber of the sub-population's elite individuals.\nIn every generation, there will be n_elites slots for the elite individuals\nthat will be copied as-is to the next generation.</li>\n</ul>\n"}, {"fullname": "eckity.subpopulation.Subpopulation.__init__", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    evaluator,\n    creators=None,\n    pcr=None,\n    operators_sequence=None,\n    selection_methods=None,\n    elitism_rate=0.0,\n    population_size=200,\n    individuals=None,\n    higher_is_better=False\n)", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.create_subpopulation_individuals", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.create_subpopulation_individuals", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_operators_sequence", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_operators_sequence", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_selection_methods", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_selection_methods", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_best_individual", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_best_individual", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_worst_individual", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_worst_individual", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.get_average_fitness", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.get_average_fitness", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "eckity.subpopulation.Subpopulation.contains_individual", "modulename": "eckity.subpopulation", "qualname": "Subpopulation.contains_individual", "type": "function", "doc": "<p></p>\n", "signature": "(self, individual)", "funcdef": "def"}, {"fullname": "eckity.termination_checkers", "modulename": "eckity.termination_checkers", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.termination_checker", "modulename": "eckity.termination_checkers.termination_checker", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.termination_checker.TerminationChecker", "modulename": "eckity.termination_checkers.termination_checker", "qualname": "TerminationChecker", "type": "class", "doc": "<p>Abstract TerminationChecker class.</p>\n\n<p>This class is responsible of checking if the evolutionary algorithm should perform early termination.\nThis class can be expanded depending on the defined termination condition.\nFor example - threshold from target fitness, small change in fitness over a number of generations etc.</p>\n"}, {"fullname": "eckity.termination_checkers.termination_checker.TerminationChecker.__init__", "modulename": "eckity.termination_checkers.termination_checker", "qualname": "TerminationChecker.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "eckity.termination_checkers.termination_checker.TerminationChecker.should_terminate", "modulename": "eckity.termination_checkers.termination_checker", "qualname": "TerminationChecker.should_terminate", "type": "function", "doc": "<p>Determines if the algorithm should perform early termination.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe population of the experiment.</li>\n<li><strong>best_individual</strong> (Individual):\nThe best individual in the current generation of the algorithm.</li>\n<li><strong>gen_number</strong> (int):\nCurrent generation number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the algorithm should terminate early, False otherwise.</li>\n</ul>\n", "signature": "(self, population, best_individual, gen_number)", "funcdef": "def"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "type": "module", "doc": "<p></p>\n"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker", "type": "class", "doc": "<p>Concrete Termination Checker that checks the distance from best existing fitness value to target fitness value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>optimal</strong> (float, default=0.):\nTarget fitness value.\nThis termination checker checks if the currently best fitness is \"close enough\" to the optimal value.</li>\n<li><strong>threshold</strong> (float, default=0.):\nHow close should the current best fitness be to the target fitness.</li>\n<li><strong>higher_is_better</strong> (bool, default=False):\nDetermines if higher fitness values are better.</li>\n</ul>\n", "bases": "eckity.termination_checkers.termination_checker.TerminationChecker"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker.__init__", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, optimal=0.0, threshold=0.0, higher_is_better=False)", "funcdef": "def"}, {"fullname": "eckity.termination_checkers.threshold_from_target_termination_checker.ThresholdFromTargetTerminationChecker.should_terminate", "modulename": "eckity.termination_checkers.threshold_from_target_termination_checker", "qualname": "ThresholdFromTargetTerminationChecker.should_terminate", "type": "function", "doc": "<p>Determines if the currently best fitness is close enough to the target fitness.\nIf so, recommends the algorithm to terminate early.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>population</strong> (Population):\nThe evolutionary experiment population of individuals.</li>\n<li><strong>best_individual</strong> (Individual):\nThe individual that has the best fitness of the current generation.</li>\n<li><strong>gen_number</strong> (int):\nCurrent generation number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the algorithm should terminate early, False otherwise.</li>\n</ul>\n", "signature": "(self, population, best_individual, gen_number)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();